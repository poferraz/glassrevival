{"file_contents":{"design_guidelines.md":{"content":"# Glass Morphism Fitness Training App - Design Guidelines\n\n## Design Approach Documentation\n**Selected Approach**: Reference-Based (iOS Health/Fitness Apps) + Custom Glass Morphism System\n**Justification**: Fitness apps require visual appeal for engagement while maintaining data clarity for workout tracking\n**Key References**: Apple Health, Nike Training Club, Strava\n**Design Principles**: Translucency, depth, mobile-first hierarchy, content clarity through glass layers\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors (Dark Mode Default)**:\n- Background: 220 15% 8% (deep charcoal)\n- Glass panels: 220 20% 15% with 20% opacity + backdrop blur\n- Primary accent: 200 80% 60% (vibrant blue)\n- Success/complete: 140 70% 50% (emerald green)\n\n**Light Mode**:\n- Background: 220 20% 95% (soft gray-white)\n- Glass panels: 0 0% 100% with 30% opacity + backdrop blur\n- Text on glass: 220 25% 20% (dark charcoal)\n\n### B. Typography\n**Font Family**: System fonts (-apple-system, SF Pro Display)\n- Headers: 600-700 weight, 24-32px\n- Body text: 400-500 weight, 16-18px\n- Data/numbers: 600 weight, 18-20px (workout metrics)\n- Small text: 400 weight, 14px\n\n### C. Layout System\n**Spacing Primitives**: Tailwind units of 3, 4, 6, 8, 12\n- Card padding: p-6\n- Section gaps: gap-8\n- Element spacing: space-y-4\n- Container margins: mx-4 (mobile), mx-8 (desktop)\n\n### D. Component Library\n\n**Glass Morphism Cards**:\n- Background: backdrop-blur-lg with semi-transparent backgrounds\n- Borders: 1px solid with 20% white/gray opacity\n- Rounded corners: rounded-2xl (16px)\n- Shadows: subtle drop shadows for depth\n\n**Navigation**:\n- Sticky glass header with backdrop blur\n- Tab-based workout day navigation\n- Floating action buttons with glass treatment\n\n**Data Display**:\n- Exercise cards with glass morphism styling\n- Set/rep counters in highlighted glass containers\n- Weight/time displays with monospace styling\n- Progress indicators with glass overlay treatment\n\n**Forms & Interactions**:\n- File upload zone with glass panel styling\n- Buttons with glass backgrounds and proper contrast\n- Input fields with translucent backgrounds\n\n### E. Mobile-First Responsive Design\n\n**iPhone 16 Pro Optimization**:\n- Safe area inset handling (top notch, bottom indicators)\n- Single-column layout with generous touch targets (44px minimum)\n- Swipe gestures for navigation between workout days\n- Glass panels sized for thumb reach zones\n\n**Breakpoint Strategy**:\n- Mobile: Single column, full-width glass cards\n- Tablet: Two-column exercise grid\n- Desktop: Three-column layout with sidebar navigation\n\n## Glass Morphism Implementation Guidelines\n\n**Visual Hierarchy**:\n- Primary content: Most opaque glass panels (30-40% background opacity)\n- Secondary content: Medium opacity (20-25% background opacity)\n- Tertiary/ambient: Light opacity (10-15% background opacity)\n\n**Depth Layers**:\n- Background: Gradient or solid color\n- Base glass layer: Main content cards\n- Floating glass: Navigation, CTAs, overlays\n- Interactive glass: Buttons, active states\n\n**Content Clarity**:\n- Ensure sufficient contrast ratios on all glass surfaces\n- Use darker/lighter text based on background luminance\n- Bold weights for important data (reps, weights, times)\n- Subtle borders to define glass panel edges\n\n## Accessibility Considerations\n- Maintain WCAG AA contrast ratios on all glass surfaces\n- Focus indicators visible through glass styling\n- Screen reader friendly workout data structure\n- Touch targets meet 44px minimum on mobile\n- Reduced motion alternatives for glass animations\n\nThis design system creates an immersive, modern fitness app experience while maintaining data clarity and usability across all workout tracking features.","size_bytes":3708},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# FitTracker - Glass Morphism Fitness Training App\n\n## Overview\n\nFitTracker is a modern fitness training application that combines beautiful glass morphism design with practical workout tracking functionality. The app allows users to upload CSV workout files, organize exercises by training days, and track their progress through an elegant, mobile-first interface. Built with React, TypeScript, and Express, it features a distinctive glass morphism aesthetic inspired by iOS Health and fitness apps.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern component patterns\n- **Build Tool**: Vite for fast development and optimized production builds\n- **UI Components**: Radix UI primitives with custom shadcn/ui styling for consistent, accessible components\n- **State Management**: React Query (TanStack Query) for server state management and local React state for UI interactions\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with custom glass morphism design system\n\n### Design System\n- **Theme**: Glass morphism with dark mode as default, light mode support\n- **Layout**: Mobile-first responsive design optimized for iPhone 16 Pro\n- **Color Palette**: Deep charcoal backgrounds with translucent glass panels using backdrop blur\n- **Typography**: System fonts (SF Pro Display) with weight-based hierarchy for fitness data clarity\n- **Components**: Custom glass card system with three opacity variants for visual depth\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js for API endpoints\n- **Language**: TypeScript with ES modules for consistency across frontend and backend\n- **Architecture Pattern**: Simple REST API with middleware-based request handling\n- **Development**: Hot reloading with Vite integration in development mode\n\n### Data Processing\n- **CSV Parser**: Custom parser following strict specification for workout data normalization\n- **Data Validation**: Comprehensive Zod schemas for type-safe data validation and transformation\n- **Exercise Prescription Parser**: Complex parsing logic for reps/time ranges, per-side exercises, and multiple units (reps, seconds, steps)\n- **Session Architecture**: SessionInstance model with exercise snapshots to prevent template mutations from affecting scheduled workouts\n- **Storage**: Browser localStorage with auto-timestamp management and local date formatting for workout data persistence\n\n### Database Layer\n- **ORM**: Drizzle ORM configured for PostgreSQL with type-safe query building\n- **Database**: PostgreSQL (Neon serverless) for production data persistence\n- **Migrations**: Drizzle Kit for schema management and migrations\n- **Development**: In-memory storage implementation for rapid prototyping\n\n### Recent Changes (September 17, 2025)\n- **Fixed Session Data Architecture**: Implemented SessionInstance model to replace direct template references, preventing template changes from affecting scheduled sessions\n- **Enhanced Zod Validation**: Added comprehensive schemas for WorkoutProgress and SetProgress with proper validation rules\n- **Improved Type Safety**: Fixed insert schemas to properly omit auto-generated fields and export correct insert types\n- **Local Date Handling**: Implemented proper local timezone date formatting to avoid UTC conversion issues\n- **Auto-Timestamp Management**: Added automatic createdAt/updatedAt handling in storage layer for data consistency\n- **Enhanced Helper Functions**: Extended workoutHelpers.ts with advanced progress tracking and validation utilities\n- **Legacy Migration**: Added backward compatibility and migration utilities for existing data structures\n\n## External Dependencies\n\n- **Database**: Neon PostgreSQL serverless database for production data storage\n- **UI Library**: Radix UI primitives providing accessible, unstyled components\n- **Design System**: shadcn/ui component library built on Radix UI with Tailwind styling\n- **Icons**: Lucide React for consistent icon set throughout the application\n- **Date Handling**: date-fns for workout date formatting and calculations\n- **File Processing**: Native File API and FileReader for CSV upload and parsing\n- **Query Management**: TanStack React Query for server state management and caching\n- **Form Handling**: React Hook Form with Hookform Resolvers for form validation\n- **Development Tools**: \n  - Replit development environment integration\n  - Vite plugin for runtime error overlay\n  - TypeScript for static type checking","size_bytes":4602},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        slideUp: {\n          '0%': { opacity: '0', transform: 'translateY(10px)' },\n          '100%': { opacity: '1', transform: 'translateY(0)' },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.3s ease-out\",\n        \"slide-up\": \"slideUp 0.3s ease-out\",\n      },\n      backdropBlur: {\n        xs: '2px',\n        sm: '4px',\n        md: '12px',\n        lg: '16px',\n        xl: '24px',\n        '2xl': '40px',\n        '3xl': '64px',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n  safelist: [\n    'backdrop-blur-sm',\n    'backdrop-blur-md',\n    'backdrop-blur-lg',\n    'backdrop-blur-xl',\n    'bg-white/10',\n    'bg-white/20',\n    'bg-white/30',\n    'bg-black/10',\n    'bg-black/20',\n    'bg-black/30',\n    'border-white/20',\n    'border-black/20'\n  ]\n} satisfies Config;\n","size_bytes":4844},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Session and workout data types\nexport interface SessionExercise {\n  id: string;\n  name: string;\n  sets: number;\n  repsMin?: number;\n  repsMax?: number;\n  timeSecondsMin?: number;\n  timeSecondsMax?: number;\n  stepsCount?: number;\n  unit: 'reps' | 'seconds' | 'steps';\n  perSide: boolean;\n  weight?: number;\n  notes?: string;\n  formGuidance?: string;\n  muscleGroup: string;\n  mainMuscle: string;\n  restSeconds?: number; // Rest time after this exercise\n}\n\nexport interface SessionTemplate {\n  id: string;\n  name: string;\n  description?: string;\n  exercises: SessionExercise[];\n  estimatedDurationMinutes?: number;\n  tags: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface SessionInstance {\n  id: string;\n  templateId: string; // Reference to original template\n  templateSnapshot: {\n    name: string;\n    description?: string;\n    exercises: SessionExercise[]; // Snapshot of exercises at time of scheduling\n    estimatedDurationMinutes?: number;\n    tags: string[];\n  };\n  date: string; // Local date string (YYYY-MM-DD)\n  startTime?: string; // Optional start time (HH:MM)\n  status: 'scheduled' | 'in_progress' | 'completed' | 'skipped';\n  scheduledAt: string;\n  startedAt?: string;\n  completedAt?: string;\n  notes?: string;\n}\n\n// Legacy type for backward compatibility\nexport interface ScheduledSession {\n  id: string;\n  templateId: string;\n  date: string; // ISO date string (YYYY-MM-DD)\n  startTime?: string; // Optional start time (HH:MM)\n  status: 'scheduled' | 'in_progress' | 'completed' | 'skipped';\n  completedAt?: string;\n  notes?: string;\n}\n\nexport interface WorkoutProgress {\n  sessionId: string;\n  exerciseId: string;\n  sets: SetProgress[];\n  startedAt: string;\n  completedAt?: string;\n  notes?: string;\n}\n\nexport interface SetProgress {\n  setNumber: number;\n  reps?: number;\n  weight?: number;\n  timeSeconds?: number;\n  steps?: number;\n  completed: boolean;\n  completedAt?: string;\n  restTimerUsed?: boolean;\n}\n\n// Base schema without refinements for use in omit operations\nconst sessionExerciseBaseSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1),\n  sets: z.number().min(1),\n  repsMin: z.number().min(1).optional(),\n  repsMax: z.number().min(1).optional(),\n  timeSecondsMin: z.number().min(1).optional(),\n  timeSecondsMax: z.number().min(1).optional(),\n  stepsCount: z.number().min(1).optional(),\n  unit: z.enum(['reps', 'seconds', 'steps']),\n  perSide: z.boolean(),\n  weight: z.number().min(0).optional(),\n  notes: z.string().optional(),\n  formGuidance: z.string().optional(),\n  muscleGroup: z.string().min(1),\n  mainMuscle: z.string().min(1),\n  restSeconds: z.number().min(0).optional(),\n});\n\n// Zod schemas for validation with refinements\nexport const sessionExerciseSchema = sessionExerciseBaseSchema.refine(\n  (data) => {\n    // Ensure proper ranges for reps\n    if (data.repsMin && data.repsMax) {\n      return data.repsMin <= data.repsMax;\n    }\n    // Ensure proper ranges for time\n    if (data.timeSecondsMin && data.timeSecondsMax) {\n      return data.timeSecondsMin <= data.timeSecondsMax;\n    }\n    return true;\n  },\n  {\n    message: \"Min values must be less than or equal to max values\"\n  }\n);\n\nexport const sessionTemplateSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1).max(100),\n  description: z.string().max(500).optional(),\n  exercises: z.array(sessionExerciseSchema).min(1),\n  estimatedDurationMinutes: z.number().min(1).optional(),\n  tags: z.array(z.string()),\n  createdAt: z.string().datetime(),\n  updatedAt: z.string().datetime(),\n});\n\nexport const sessionInstanceSchema = z.object({\n  id: z.string(),\n  templateId: z.string(),\n  templateSnapshot: z.object({\n    name: z.string().min(1),\n    description: z.string().optional(),\n    exercises: z.array(sessionExerciseSchema),\n    estimatedDurationMinutes: z.number().min(1).optional(),\n    tags: z.array(z.string()),\n  }),\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\"),\n  startTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Time must be in HH:MM format\").optional(),\n  status: z.enum(['scheduled', 'in_progress', 'completed', 'skipped']),\n  scheduledAt: z.string().datetime(),\n  startedAt: z.string().datetime().optional(),\n  completedAt: z.string().datetime().optional(),\n  notes: z.string().max(1000).optional(),\n});\n\n// Legacy schema for backward compatibility\nexport const scheduledSessionSchema = z.object({\n  id: z.string(),\n  templateId: z.string(),\n  date: z.string(),\n  startTime: z.string().optional(),\n  status: z.enum(['scheduled', 'in_progress', 'completed', 'skipped']),\n  completedAt: z.string().optional(),\n  notes: z.string().optional(),\n});\n\n// Zod schemas for WorkoutProgress and SetProgress\nexport const setProgressSchema = z.object({\n  setNumber: z.number().min(1),\n  reps: z.number().min(0).optional(),\n  weight: z.number().min(0).optional(),\n  timeSeconds: z.number().min(0).optional(),\n  steps: z.number().min(0).optional(),\n  completed: z.boolean(),\n  completedAt: z.string().datetime().optional(),\n  restTimerUsed: z.boolean().optional(),\n});\n\nexport const workoutProgressSchema = z.object({\n  sessionId: z.string(),\n  exerciseId: z.string(),\n  sets: z.array(setProgressSchema),\n  startedAt: z.string().datetime(),\n  completedAt: z.string().datetime().optional(),\n  notes: z.string().max(500).optional(),\n});\n\n// Insert schemas (omit auto-generated fields)\nexport const insertSessionExerciseSchema = sessionExerciseBaseSchema.omit({ id: true }).refine(\n  (data) => {\n    // Ensure proper ranges for reps\n    if (data.repsMin && data.repsMax) {\n      return data.repsMin <= data.repsMax;\n    }\n    // Ensure proper ranges for time\n    if (data.timeSecondsMin && data.timeSecondsMax) {\n      return data.timeSecondsMin <= data.timeSecondsMax;\n    }\n    return true;\n  },\n  {\n    message: \"Min values must be less than or equal to max values\"\n  }\n);\nexport const insertSessionTemplateSchema = sessionTemplateSchema.omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\nexport const insertSessionInstanceSchema = sessionInstanceSchema.omit({ \n  id: true,\n  scheduledAt: true,\n  startedAt: true,\n  completedAt: true \n});\nexport const insertWorkoutProgressSchema = workoutProgressSchema.omit({ \n  startedAt: true,\n  completedAt: true \n});\nexport const insertSetProgressSchema = setProgressSchema.omit({ \n  completedAt: true \n});\n\n// Insert and select types\nexport type SessionExerciseInsert = z.infer<typeof insertSessionExerciseSchema>;\nexport type SessionTemplateInsert = z.infer<typeof insertSessionTemplateSchema>;\nexport type SessionInstanceInsert = z.infer<typeof insertSessionInstanceSchema>;\nexport type WorkoutProgressInsert = z.infer<typeof insertWorkoutProgressSchema>;\nexport type SetProgressInsert = z.infer<typeof insertSetProgressSchema>;\n\n// Legacy types for backward compatibility\nexport type ScheduledSessionInsert = z.infer<typeof scheduledSessionSchema>;\n","size_bytes":7463},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Calendar from \"@/pages/Calendar\";\nimport Sessions from \"@/pages/Sessions\";\nimport WorkoutMode from \"@/pages/WorkoutMode\";\nimport Home from \"@/pages/Home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Calendar} />\n      <Route path=\"/sessions\" component={Sessions} />\n      <Route path=\"/workout/:sessionId\" component={WorkoutMode} />\n      <Route path=\"/import\" component={Home} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"dark\">\n          <Router />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1079},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 20% 95%;\n\n  --foreground: 220 25% 20%;\n\n  --border: 220 15% 85%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 25% 20%;\n\n  --card-border: 220 10% 90%;\n\n  --sidebar: 220 15% 88%;\n\n  --sidebar-foreground: 220 25% 20%;\n\n  --sidebar-border: 220 15% 80%;\n\n  --sidebar-primary: 200 80% 50%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 10% 82%;\n\n  --sidebar-accent-foreground: 220 25% 25%;\n\n  --sidebar-ring: 200 80% 50%;\n\n  --popover: 0 0% 98%;\n\n  --popover-foreground: 220 25% 20%;\n\n  --popover-border: 220 12% 88%;\n\n  --primary: 200 80% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 8% 85%;\n\n  --secondary-foreground: 220 25% 25%;\n\n  --muted: 220 6% 88%;\n\n  --muted-foreground: 220 15% 45%;\n\n  --accent: 220 8% 90%;\n\n  --accent-foreground: 220 25% 25%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 20% 75%;\n  --ring: 200 80% 50%;\n  --chart-1: 200 80% 35%;\n  --chart-2: 140 70% 35%;\n  --chart-3: 280 60% 40%;\n  --chart-4: 30 80% 45%;\n  --chart-5: 15 75% 50%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 220 10% 85%;\n\n  --border: 220 12% 18%;\n\n  --card: 220 20% 12%;\n\n  --card-foreground: 220 10% 85%;\n\n  --card-border: 220 15% 22%;\n\n  --sidebar: 220 18% 10%;\n\n  --sidebar-foreground: 220 10% 85%;\n\n  --sidebar-border: 220 15% 20%;\n\n  --sidebar-primary: 200 80% 60%;\n\n  --sidebar-primary-foreground: 220 15% 8%;\n\n  --sidebar-accent: 220 15% 18%;\n\n  --sidebar-accent-foreground: 220 10% 80%;\n\n  --sidebar-ring: 200 80% 60%;\n\n  --popover: 220 18% 15%;\n\n  --popover-foreground: 220 10% 85%;\n\n  --popover-border: 220 15% 25%;\n\n  --primary: 200 80% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 12% 20%;\n\n  --secondary-foreground: 220 10% 80%;\n\n  --muted: 220 10% 15%;\n\n  --muted-foreground: 220 8% 55%;\n\n  --accent: 220 12% 18%;\n\n  --accent-foreground: 220 10% 80%;\n\n  --destructive: 0 70% 45%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 15% 25%;\n  --ring: 200 80% 60%;\n  --chart-1: 200 80% 65%;\n  --chart-2: 140 70% 60%;\n  --chart-3: 280 60% 65%;\n  --chart-4: 30 80% 65%;\n  --chart-5: 15 75% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Mobile viewport and safe area handling for one screen fit */\n  .mobile-viewport {\n    height: calc(100dvh - env(safe-area-inset-top) - env(safe-area-inset-bottom));\n    height: calc(100vh - env(safe-area-inset-top) - env(safe-area-inset-bottom)); /* fallback */\n    \n    /* Prevent height changes when keyboard opens */\n    min-height: calc(100dvh - env(safe-area-inset-top) - env(safe-area-inset-bottom));\n    min-height: calc(100vh - env(safe-area-inset-top) - env(safe-area-inset-bottom)); /* fallback */\n  }\n\n  /* Safe area utilities */\n  .top-safe {\n    padding-top: env(safe-area-inset-top);\n  }\n\n  .bottom-safe {\n    padding-bottom: env(safe-area-inset-bottom);\n  }\n\n  .pb-safe {\n    padding-bottom: calc(1rem + env(safe-area-inset-bottom));\n  }\n\n  .pt-safe {\n    padding-top: calc(1rem + env(safe-area-inset-top));\n  }\n\n  .workout-mode-container {\n    max-height: calc(100dvh - env(safe-area-inset-top) - env(safe-area-inset-bottom) - 4rem);\n    max-height: calc(100vh - env(safe-area-inset-top) - env(safe-area-inset-bottom) - 4rem); /* fallback */\n    overflow-y: auto;\n    scroll-padding-top: 2rem;\n    -webkit-overflow-scrolling: touch;\n    \n    /* Maintain consistent height even when keyboard is open */\n    height: calc(100dvh - env(safe-area-inset-top) - env(safe-area-inset-bottom) - 4rem);\n    height: calc(100vh - env(safe-area-inset-top) - env(safe-area-inset-bottom) - 4rem); /* fallback */\n  }\n\n  .set-list-container {\n    max-height: calc(35dvh - env(safe-area-inset-bottom));\n    max-height: calc(35vh - env(safe-area-inset-bottom)); /* fallback */\n    overflow-y: auto;\n    overflow-x: hidden;\n    scroll-padding-top: 1rem;\n    -webkit-overflow-scrolling: touch;\n    \n    /* Stable height for keyboard interactions */\n    min-height: 8rem;\n    \n    /* Improved scrolling on mobile */\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n  }\n  \n  .set-list-container::-webkit-scrollbar {\n    display: none;\n  }\n\n  .fixed-row-height {\n    height: 4rem; /* 64px fixed height to prevent layout shifts */\n    min-height: 4rem;\n  }\n\n  /* Scroll margin for SetRow elements to account for keyboard and header */\n  .scroll-margin-top {\n    scroll-margin-top: 6rem; /* Adjust for header and keyboard */\n  }\n\n  /* iOS safe area support */\n  @supports (padding: env(safe-area-inset-top)) {\n    .mobile-viewport {\n      height: calc(100dvh - env(safe-area-inset-top) - env(safe-area-inset-bottom));\n    }\n    \n    .workout-mode-container {\n      max-height: calc(100dvh - env(safe-area-inset-top) - env(safe-area-inset-bottom) - 4rem);\n    }\n    \n    .set-list-container {\n      max-height: calc(35dvh - env(safe-area-inset-bottom));\n    }\n  }\n\n  /* iOS keyboard handling */\n  @supports (-webkit-touch-callout: none) {\n    /* Prevent viewport scaling on iOS when keyboard opens */\n    .workout-mode-container {\n      position: relative;\n      overflow-y: auto;\n      height: 100%;\n      -webkit-overflow-scrolling: touch;\n    }\n    \n    /* Ensure set list container maintains proper scrolling */\n    .set-list-container {\n      position: relative;\n      -webkit-overflow-scrolling: touch;\n      scroll-padding-top: 4rem;\n    }\n    \n    /* Prevent zoom on input focus */\n    input[type=\"number\"], input[type=\"text\"], input[type=\"email\"], input[type=\"tel\"] {\n      font-size: 16px !important;\n      transform: translateZ(0);\n      -webkit-transform: translateZ(0);\n    }\n  }\n\n  /* Keyboard-aware scrolling behavior */\n  .keyboard-open {\n    /* Applied to body when keyboard is detected */\n    position: fixed;\n    width: 100%;\n    height: 100vh;\n    overflow: hidden;\n  }\n\n  /* Smooth scrolling for row visibility adjustments */\n  .smooth-scroll {\n    scroll-behavior: smooth;\n  }\n\n  /* Prevent layout shifts during keyboard interactions */\n  .stable-layout {\n    contain: layout style;\n  }\n\n  /* Enhanced mobile input handling */\n  @media screen and (-webkit-min-device-pixel-ratio: 0) {\n    input[type=\"number\"] {\n      font-size: 16px;\n      /* Prevent iOS zoom while maintaining design */\n      -webkit-appearance: none;\n      border-radius: 0;\n    }\n  }\n}","size_bytes":14323},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CSVUpload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport GlassCard from \"./GlassCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Upload, FileText, CheckCircle, AlertCircle } from \"lucide-react\";\n\ninterface CSVUploadProps {\n  onFileSelect?: (file: File) => void;\n  onParse?: (data: any[]) => void;\n  isProcessing?: boolean;\n  className?: string;\n}\n\nexport default function CSVUpload({ \n  onFileSelect, \n  onParse, \n  isProcessing = false,\n  className \n}: CSVUploadProps) {\n  const [dragOver, setDragOver] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [uploadStatus, setUploadStatus] = useState<'idle' | 'success' | 'error'>('idle');\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n    \n    const files = e.dataTransfer.files;\n    if (files.length > 0) {\n      handleFileSelection(files[0]);\n    }\n  };\n\n  const handleFileSelection = (file: File) => {\n    if (file.type !== 'text/csv' && !file.name.endsWith('.csv')) {\n      setUploadStatus('error');\n      console.log('Invalid file type. Please select a CSV file.');\n      return;\n    }\n\n    setSelectedFile(file);\n    setUploadStatus('success');\n    onFileSelect?.(file);\n    console.log(`CSV file selected: ${file.name} (${(file.size / 1024).toFixed(1)}KB)`);\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      handleFileSelection(files[0]);\n    }\n  };\n\n  const handleBrowseClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleParseClick = () => {\n    if (selectedFile) {\n      console.log('Parsing CSV file:', selectedFile.name);\n      // Mock parsing simulation\n      setTimeout(() => {\n        onParse?.([{ mock: 'data' }]);\n      }, 1000);\n    }\n  };\n\n  return (\n    <GlassCard \n      variant=\"secondary\" \n      className={cn(\"transition-all duration-300\", className)}\n    >\n      <div className=\"p-6\">\n        <div className=\"text-center mb-6\">\n          <FileText className=\"w-12 h-12 text-primary mx-auto mb-3\" />\n          <h3 className=\"text-lg font-semibold text-white mb-2\">\n            Import Workout Data\n          </h3>\n          <p className=\"text-white/75 text-sm\">\n            Upload your \"TREINO SETEMBRO .csv\" file to parse workout sessions\n          </p>\n        </div>\n\n        {/* File Drop Zone */}\n        <div\n          className={cn(\n            \"border-2 border-dashed rounded-xl p-8 text-center transition-all duration-300\",\n            dragOver \n              ? \"border-primary bg-primary/10\" \n              : \"border-white/30 hover:border-white/50\",\n            uploadStatus === 'success' && \"border-green-400 bg-green-400/10\",\n            uploadStatus === 'error' && \"border-red-400 bg-red-400/10\"\n          )}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onDrop={handleDrop}\n          data-testid=\"csv-drop-zone\"\n        >\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handleFileInputChange}\n            className=\"hidden\"\n            data-testid=\"csv-file-input\"\n          />\n\n          {!selectedFile ? (\n            <div className=\"space-y-4\">\n              <Upload className={cn(\n                \"w-10 h-10 mx-auto transition-colors\",\n                dragOver ? \"text-primary\" : \"text-white/60\"\n              )} />\n              <div>\n                <p className=\"text-white font-medium mb-1\">\n                  Drop your CSV file here\n                </p>\n                <p className=\"text-white/60 text-sm\">\n                  or{\" \"}\n                  <button\n                    onClick={handleBrowseClick}\n                    className=\"text-primary hover:underline font-medium\"\n                    data-testid=\"browse-button\"\n                  >\n                    browse files\n                  </button>\n                </p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {uploadStatus === 'success' ? (\n                <CheckCircle className=\"w-10 h-10 text-green-400 mx-auto\" />\n              ) : (\n                <AlertCircle className=\"w-10 h-10 text-red-400 mx-auto\" />\n              )}\n              <div>\n                <p className=\"text-white font-medium\" data-testid=\"selected-file-name\">\n                  {selectedFile.name}\n                </p>\n                <p className=\"text-white/60 text-sm\">\n                  {(selectedFile.size / 1024).toFixed(1)}KB\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Actions */}\n        {selectedFile && uploadStatus === 'success' && (\n          <div className=\"mt-6 flex gap-3\">\n            <Button\n              onClick={handleParseClick}\n              disabled={isProcessing}\n              className=\"flex-1\"\n              data-testid=\"parse-button\"\n            >\n              {isProcessing ? \"Parsing...\" : \"Parse Workout Data\"}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setSelectedFile(null);\n                setUploadStatus('idle');\n                if (fileInputRef.current) {\n                  fileInputRef.current.value = '';\n                }\n              }}\n              data-testid=\"reset-button\"\n            >\n              Reset\n            </Button>\n          </div>\n        )}\n      </div>\n    </GlassCard>\n  );\n}","size_bytes":5831},"client/src/components/ExerciseCard.tsx":{"content":"import { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport GlassCard from \"./GlassCard\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dumbbell, Clock, Target, Info } from \"lucide-react\";\n\nexport interface Exercise {\n  id: string;\n  name: string;\n  sets: number;\n  repsMin?: number;\n  repsMax?: number;\n  timeSecondsMin?: number;\n  timeSecondsMax?: number;\n  stepsCount?: number;\n  unit: 'reps' | 'seconds' | 'steps';\n  perSide: boolean;\n  weight?: number;\n  notes?: string;\n  formGuidance?: string;\n  muscleGroup: string;\n  mainMuscle: string;\n}\n\ninterface ExerciseCardProps {\n  exercise: Exercise;\n  isCompleted?: boolean;\n  onComplete?: (exerciseId: string) => void;\n}\n\nexport default function ExerciseCard({ \n  exercise, \n  isCompleted = false, \n  onComplete \n}: ExerciseCardProps) {\n  const [completed, setCompleted] = useState(isCompleted);\n  const [showDetails, setShowDetails] = useState(false);\n\n  const handleComplete = () => {\n    const newCompleted = !completed;\n    setCompleted(newCompleted);\n    onComplete?.(exercise.id);\n    console.log(`Exercise ${exercise.name} ${newCompleted ? 'completed' : 'uncompleted'}`);\n  };\n\n  const formatPrescription = () => {\n    const { unit, repsMin, repsMax, timeSecondsMin, timeSecondsMax, stepsCount, perSide } = exercise;\n    \n    let prescription = '';\n    \n    if (unit === 'reps') {\n      if (repsMin === repsMax) {\n        prescription = `${repsMin} reps`;\n      } else {\n        prescription = `${repsMin}-${repsMax} reps`;\n      }\n    } else if (unit === 'seconds') {\n      if (timeSecondsMin === timeSecondsMax) {\n        prescription = `${timeSecondsMin}s`;\n      } else {\n        prescription = `${timeSecondsMin}-${timeSecondsMax}s`;\n      }\n    } else if (unit === 'steps') {\n      prescription = `${stepsCount} steps`;\n    }\n    \n    return perSide ? `${prescription} per side` : prescription;\n  };\n\n  return (\n    <GlassCard \n      variant=\"primary\" \n      className={cn(\n        \"transition-all duration-300\",\n        completed && \"opacity-75 bg-green-500/20 dark:bg-green-400/20\"\n      )}\n    >\n      <div className=\"p-6 space-y-4\">\n        {/* Header */}\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <h3 className=\"text-lg font-semibold text-white mb-1\" data-testid={`exercise-name-${exercise.id}`}>\n              {exercise.name}\n            </h3>\n            <div className=\"flex flex-wrap gap-2 mb-2\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {exercise.mainMuscle}\n              </Badge>\n              <Badge variant=\"outline\" className=\"text-xs text-white/80 border-white/30\">\n                {exercise.muscleGroup}\n              </Badge>\n            </div>\n          </div>\n          <Button\n            size=\"sm\"\n            variant={completed ? \"default\" : \"outline\"}\n            onClick={handleComplete}\n            className=\"flex-shrink-0\"\n            data-testid={`complete-button-${exercise.id}`}\n          >\n            {completed ? \"Done\" : \"Mark Complete\"}\n          </Button>\n        </div>\n\n        {/* Exercise Details */}\n        <div className=\"grid grid-cols-2 gap-4 text-white\">\n          <div className=\"flex items-center gap-2\">\n            <Target className=\"w-4 h-4 text-primary\" />\n            <div>\n              <div className=\"text-sm opacity-75\">Sets</div>\n              <div className=\"font-mono font-semibold\" data-testid={`sets-${exercise.id}`}>\n                {exercise.sets}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {exercise.unit === 'seconds' ? (\n              <Clock className=\"w-4 h-4 text-primary\" />\n            ) : (\n              <Dumbbell className=\"w-4 h-4 text-primary\" />\n            )}\n            <div>\n              <div className=\"text-sm opacity-75\">\n                {exercise.unit === 'seconds' ? 'Time' : 'Reps'}\n              </div>\n              <div className=\"font-mono font-semibold\" data-testid={`prescription-${exercise.id}`}>\n                {formatPrescription()}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Weight */}\n        {exercise.weight && (\n          <div className=\"flex items-center gap-2 text-white\">\n            <Dumbbell className=\"w-4 h-4 text-primary\" />\n            <div>\n              <span className=\"text-sm opacity-75\">Weight: </span>\n              <span className=\"font-mono font-semibold\" data-testid={`weight-${exercise.id}`}>\n                {exercise.weight}kg\n              </span>\n            </div>\n          </div>\n        )}\n\n        {/* Notes and Form Guidance Toggle */}\n        {(exercise.notes || exercise.formGuidance) && (\n          <div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowDetails(!showDetails)}\n              className=\"text-white/80 hover:text-white p-0 h-auto\"\n              data-testid={`details-button-${exercise.id}`}\n            >\n              <Info className=\"w-4 h-4 mr-1\" />\n              {showDetails ? 'Hide Details' : 'Show Details'}\n            </Button>\n            \n            {showDetails && (\n              <div className=\"mt-3 space-y-3 animate-slide-up\">\n                {exercise.notes && (\n                  <div>\n                    <div className=\"text-sm font-medium text-white mb-1\">Notes:</div>\n                    <div className=\"text-sm text-white/80 whitespace-pre-line\">\n                      {exercise.notes}\n                    </div>\n                  </div>\n                )}\n                {exercise.formGuidance && (\n                  <div>\n                    <div className=\"text-sm font-medium text-white mb-1\">Form Guidance:</div>\n                    <div className=\"text-sm text-white/80\">\n                      {exercise.formGuidance}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </GlassCard>\n  );\n}","size_bytes":6103},"client/src/components/GlassCard.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { ReactNode } from \"react\";\n\ninterface GlassCardProps {\n  children: ReactNode;\n  className?: string;\n  onClick?: () => void;\n  variant?: \"primary\" | \"secondary\" | \"tertiary\";\n}\n\nexport default function GlassCard({ \n  children, \n  className, \n  onClick, \n  variant = \"primary\" \n}: GlassCardProps) {\n  const variantClasses = {\n    primary: \"bg-white/30 dark:bg-white/20 border-white/30 dark:border-white/20\",\n    secondary: \"bg-white/20 dark:bg-white/15 border-white/20 dark:border-white/15\",\n    tertiary: \"bg-white/10 dark:bg-white/10 border-white/10 dark:border-white/10\"\n  };\n\n  return (\n    <div\n      className={cn(\n        \"backdrop-blur-lg rounded-2xl border shadow-lg\",\n        \"transition-all duration-300 hover-elevate\",\n        variantClasses[variant],\n        onClick && \"cursor-pointer active-elevate-2\",\n        className\n      )}\n      onClick={onClick}\n      data-testid={`glass-card-${variant}`}\n    >\n      {children}\n    </div>\n  );\n}","size_bytes":993},"client/src/components/ImportReport.tsx":{"content":"import GlassCard from \"./GlassCard\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, AlertTriangle, Info, BarChart3 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ImportStats {\n  totalRows: number;\n  validRows: number;\n  invalidRows: number;\n  unitCounts: {\n    reps: number;\n    seconds: number;\n    steps: number;\n  };\n  malformedTokens: string[];\n  parsingTime: number;\n}\n\ninterface ImportReportProps {\n  stats: ImportStats;\n  filename: string;\n  onClose?: () => void;\n}\n\nexport default function ImportReport({ stats, filename, onClose }: ImportReportProps) {\n  const successRate = Math.round((stats.validRows / stats.totalRows) * 100);\n  \n  const StatCard = ({ \n    icon: Icon, \n    label, \n    value, \n    variant = \"default\" \n  }: { \n    icon: any, \n    label: string, \n    value: string | number, \n    variant?: \"default\" | \"success\" | \"warning\" | \"error\" \n  }) => {\n    const variantStyles = {\n      default: \"text-white/90\",\n      success: \"text-green-400\",\n      warning: \"text-yellow-400\", \n      error: \"text-red-400\"\n    };\n\n    return (\n      <div className=\"flex items-center gap-3\">\n        <Icon className={cn(\"w-5 h-5\", variantStyles[variant])} />\n        <div>\n          <div className=\"text-white/75 text-sm\">{label}</div>\n          <div className={cn(\"font-mono font-semibold text-lg\", variantStyles[variant])}>\n            {value}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <GlassCard variant=\"primary\" className=\"animate-slide-up\">\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <h3 className=\"text-xl font-semibold text-white mb-1\" data-testid=\"import-report-title\">\n              Import Report\n            </h3>\n            <p className=\"text-white/75 text-sm\" data-testid=\"import-filename\">\n              {filename}\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <div className={cn(\n              \"text-2xl font-bold\",\n              successRate >= 90 ? \"text-green-400\" : \n              successRate >= 70 ? \"text-yellow-400\" : \"text-red-400\"\n            )} data-testid=\"success-rate\">\n              {successRate}%\n            </div>\n            <div className=\"text-white/60 text-xs\">Success Rate</div>\n          </div>\n        </div>\n\n        {/* Main Stats */}\n        <div className=\"grid grid-cols-2 gap-6\">\n          <StatCard \n            icon={BarChart3}\n            label=\"Total Rows\"\n            value={stats.totalRows}\n            variant=\"default\"\n          />\n          <StatCard \n            icon={CheckCircle}\n            label=\"Valid Rows\" \n            value={stats.validRows}\n            variant=\"success\"\n          />\n        </div>\n\n        {/* Unit Distribution */}\n        <div>\n          <h4 className=\"text-white font-medium mb-3 flex items-center gap-2\">\n            <Info className=\"w-4 h-4\" />\n            Exercise Unit Distribution\n          </h4>\n          <div className=\"grid grid-cols-3 gap-3\">\n            <div className=\"text-center\">\n              <Badge variant=\"secondary\" className=\"w-full justify-center py-2\">\n                <div>\n                  <div className=\"font-mono font-semibold text-lg\" data-testid=\"reps-count\">\n                    {stats.unitCounts.reps}\n                  </div>\n                  <div className=\"text-xs opacity-75\">Reps</div>\n                </div>\n              </Badge>\n            </div>\n            <div className=\"text-center\">\n              <Badge variant=\"secondary\" className=\"w-full justify-center py-2\">\n                <div>\n                  <div className=\"font-mono font-semibold text-lg\" data-testid=\"seconds-count\">\n                    {stats.unitCounts.seconds}\n                  </div>\n                  <div className=\"text-xs opacity-75\">Seconds</div>\n                </div>\n              </Badge>\n            </div>\n            <div className=\"text-center\">\n              <Badge variant=\"secondary\" className=\"w-full justify-center py-2\">\n                <div>\n                  <div className=\"font-mono font-semibold text-lg\" data-testid=\"steps-count\">\n                    {stats.unitCounts.steps}\n                  </div>\n                  <div className=\"text-xs opacity-75\">Steps</div>\n                </div>\n              </Badge>\n            </div>\n          </div>\n        </div>\n\n        {/* Parsing Issues */}\n        {stats.malformedTokens.length > 0 && (\n          <div>\n            <h4 className=\"text-white font-medium mb-3 flex items-center gap-2\">\n              <AlertTriangle className=\"w-4 h-4 text-yellow-400\" />\n              Parsing Issues ({stats.malformedTokens.length})\n            </h4>\n            <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n              {stats.malformedTokens.slice(0, 5).map((token, index) => (\n                <div \n                  key={index}\n                  className=\"bg-white/10 rounded-lg p-2 text-white/80 text-sm font-mono\"\n                  data-testid={`malformed-token-${index}`}\n                >\n                  \"{token}\"\n                </div>\n              ))}\n              {stats.malformedTokens.length > 5 && (\n                <div className=\"text-white/60 text-sm text-center\">\n                  +{stats.malformedTokens.length - 5} more issues\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Footer */}\n        <div className=\"flex items-center justify-between pt-4 border-t border-white/20\">\n          <div className=\"text-white/60 text-sm\">\n            Parsed in {stats.parsingTime}ms\n          </div>\n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"text-primary hover:text-primary/80 text-sm font-medium transition-colors\"\n              data-testid=\"close-report-button\"\n            >\n              Close Report\n            </button>\n          )}\n        </div>\n      </div>\n    </GlassCard>\n  );\n}","size_bytes":6015},"client/src/components/Layout.tsx":{"content":"import { ReactNode, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport GlassCard from \"./GlassCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun, Menu, User, Calendar, LibraryBig, Upload } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\ninterface LayoutProps {\n  children: ReactNode;\n  className?: string;\n}\n\nexport default function Layout({ children, className }: LayoutProps) {\n  const [darkMode, setDarkMode] = useState(true);\n  const [showMenu, setShowMenu] = useState(false);\n  const [location] = useLocation();\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    document.documentElement.classList.toggle('dark');\n    console.log('Dark mode toggled:', !darkMode);\n  };\n\n  const navigationItems = [\n    { path: '/', label: 'Calendar', icon: Calendar },\n    { path: '/sessions', label: 'Sessions', icon: LibraryBig },\n    { path: '/import', label: 'Import', icon: Upload },\n  ];\n\n  const isActivePath = (path: string) => {\n    return location === path || (path !== '/' && location.startsWith(path));\n  };\n\n  return (\n    <div className={cn(\"min-h-screen\", darkMode ? \"dark\" : \"\")}>\n      {/* Background */}\n      <div className=\"fixed inset-0 bg-gradient-to-br from-blue-600 via-purple-700 to-indigo-800 dark:from-blue-900 dark:via-purple-900 dark:to-indigo-950\" />\n      \n      {/* Content Container */}\n      <div className=\"relative z-10\">\n        {/* Header */}\n        <header className=\"sticky top-0 z-50 p-4 pb-0\">\n          <GlassCard variant=\"secondary\" className=\"px-4 py-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={() => setShowMenu(!showMenu)}\n                  className=\"md:hidden text-white hover:text-white\"\n                  data-testid=\"menu-button\"\n                >\n                  <Menu className=\"w-5 h-5\" />\n                </Button>\n                <h1 className=\"text-xl font-bold text-white\" data-testid=\"app-title\">\n                  FitTracker\n                </h1>\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                {/* Desktop Navigation */}\n                <div className=\"hidden md:flex items-center gap-1 mr-2\">\n                  {navigationItems.map(({ path, label, icon: Icon }) => (\n                    <Link key={path} href={path}>\n                      <Button\n                        variant={isActivePath(path) ? \"default\" : \"ghost\"}\n                        size=\"sm\"\n                        className={`text-white hover:text-white ${\n                          isActivePath(path) ? 'bg-white/20' : ''\n                        }`}\n                        data-testid={`nav-${label.toLowerCase()}`}\n                      >\n                        <Icon className=\"w-4 h-4 mr-1\" />\n                        {label}\n                      </Button>\n                    </Link>\n                  ))}\n                </div>\n\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={toggleDarkMode}\n                  className=\"text-white hover:text-white\"\n                  data-testid=\"theme-toggle\"\n                >\n                  {darkMode ? (\n                    <Sun className=\"w-5 h-5\" />\n                  ) : (\n                    <Moon className=\"w-5 h-5\" />\n                  )}\n                </Button>\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  className=\"text-white hover:text-white\"\n                  data-testid=\"user-menu\"\n                >\n                  <User className=\"w-5 h-5\" />\n                </Button>\n              </div>\n            </div>\n          </GlassCard>\n        </header>\n\n        {/* Mobile Menu */}\n        {showMenu && (\n          <div className=\"fixed inset-x-4 top-20 z-40 md:hidden animate-slide-up\">\n            <GlassCard variant=\"primary\">\n              <div className=\"p-4 space-y-3\">\n                <Link href=\"/sessions\">\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start text-white hover:text-white\"\n                    onClick={() => setShowMenu(false)}\n                    data-testid=\"nav-workouts\"\n                  >\n                    <LibraryBig className=\"w-4 h-4 mr-2\" />\n                    My Workouts\n                  </Button>\n                </Link>\n                <Link href=\"/import\">\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start text-white hover:text-white\"\n                    onClick={() => setShowMenu(false)}\n                    data-testid=\"nav-import\"\n                  >\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Import CSV\n                  </Button>\n                </Link>\n                <Link href=\"/\">\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start text-white hover:text-white\"\n                    onClick={() => setShowMenu(false)}\n                    data-testid=\"nav-calendar\"\n                  >\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    Calendar\n                  </Button>\n                </Link>\n              </div>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* Main Content */}\n        <main \n          className={cn(\n            \"container mx-auto px-4 py-6 pb-20\",\n            \"safe-area-inset-top safe-area-inset-bottom\",\n            className\n          )}\n        >\n          {children}\n        </main>\n\n        {/* Safe Area Bottom Padding for iOS */}\n        <div className=\"h-safe-bottom bg-transparent\" />\n      </div>\n    </div>\n  );\n}","size_bytes":5921},"client/src/components/WorkoutDayNav.tsx":{"content":"import { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport GlassCard from \"./GlassCard\";\n\ninterface WorkoutDay {\n  id: string;\n  label: string;\n  machineKey: string;\n  exerciseCount: number;\n}\n\ninterface WorkoutDayNavProps {\n  days: WorkoutDay[];\n  activeDayId?: string;\n  onDaySelect?: (dayId: string) => void;\n}\n\nexport default function WorkoutDayNav({ \n  days, \n  activeDayId, \n  onDaySelect \n}: WorkoutDayNavProps) {\n  const [selectedDay, setSelectedDay] = useState(activeDayId || days[0]?.id);\n\n  const handleDaySelect = (dayId: string) => {\n    setSelectedDay(dayId);\n    onDaySelect?.(dayId);\n    console.log(`Selected workout day: ${dayId}`);\n  };\n\n  return (\n    <div className=\"sticky top-4 z-20\" data-testid=\"workout-day-nav\">\n      <GlassCard variant=\"secondary\" className=\"p-2\">\n        <div className=\"flex gap-2 overflow-x-auto scrollbar-hide\">\n          {days.map((day) => (\n            <button\n              key={day.id}\n              onClick={() => handleDaySelect(day.id)}\n              className={cn(\n                \"flex-shrink-0 px-4 py-3 rounded-xl font-medium text-sm transition-all duration-200\",\n                \"min-w-[120px] text-center border border-transparent\",\n                selectedDay === day.id\n                  ? \"bg-primary text-primary-foreground shadow-md transform scale-105\"\n                  : \"text-white/90 hover-elevate active-elevate-2 hover:text-white\"\n              )}\n              data-testid={`day-button-${day.id}`}\n            >\n              <div>\n                <div className=\"font-semibold\">{day.label}</div>\n                <div className=\"text-xs opacity-75\">\n                  {day.exerciseCount} exercises\n                </div>\n              </div>\n            </button>\n          ))}\n        </div>\n      </GlassCard>\n    </div>\n  );\n}","size_bytes":1819},"client/src/components/WorkoutSession.tsx":{"content":"import { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport ExerciseCard, { Exercise } from \"./ExerciseCard\";\nimport GlassCard from \"./GlassCard\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Trophy, Target, Clock, CheckCircle } from \"lucide-react\";\n\ninterface WorkoutSessionProps {\n  dayLabel: string;\n  exercises: Exercise[];\n  onExerciseComplete?: (exerciseId: string) => void;\n  onSessionComplete?: () => void;\n}\n\nexport default function WorkoutSession({\n  dayLabel,\n  exercises,\n  onExerciseComplete,\n  onSessionComplete\n}: WorkoutSessionProps) {\n  const [completedExercises, setCompletedExercises] = useState<Set<string>>(new Set());\n  \n  const completionPercentage = (completedExercises.size / exercises.length) * 100;\n  const isSessionComplete = completedExercises.size === exercises.length;\n\n  const handleExerciseComplete = (exerciseId: string) => {\n    const newCompleted = new Set(completedExercises);\n    if (newCompleted.has(exerciseId)) {\n      newCompleted.delete(exerciseId);\n    } else {\n      newCompleted.add(exerciseId);\n    }\n    setCompletedExercises(newCompleted);\n    onExerciseComplete?.(exerciseId);\n    \n    // Check if session is now complete\n    if (newCompleted.size === exercises.length && newCompleted.size > 0) {\n      setTimeout(() => {\n        console.log('Session completed!');\n        onSessionComplete?.();\n      }, 500);\n    }\n  };\n\n  const getMuscleGroups = () => {\n    const groups = Array.from(new Set(exercises.map(ex => ex.muscleGroup)));\n    return groups;\n  };\n\n  const getTotalSets = () => {\n    return exercises.reduce((total, ex) => total + ex.sets, 0);\n  };\n\n  const getEstimatedTime = () => {\n    // Rough estimation: 2-3 minutes per set + rest time\n    const totalSets = getTotalSets();\n    return Math.round(totalSets * 2.5);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Session Header */}\n      <GlassCard variant=\"primary\">\n        <div className=\"p-6\">\n          <div className=\"flex items-start justify-between mb-4\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-white mb-2\" data-testid=\"session-title\">\n                {dayLabel}\n              </h2>\n              <div className=\"flex flex-wrap gap-2\">\n                {getMuscleGroups().map((group, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                    {group}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n            {isSessionComplete && (\n              <div className=\"text-green-400 animate-bounce\">\n                <Trophy className=\"w-8 h-8\" />\n              </div>\n            )}\n          </div>\n\n          {/* Session Stats */}\n          <div className=\"grid grid-cols-3 gap-4 mb-4\">\n            <div className=\"flex items-center gap-2 text-white/90\">\n              <Target className=\"w-4 h-4 text-primary\" />\n              <div>\n                <div className=\"text-xs opacity-75\">Exercises</div>\n                <div className=\"font-semibold\" data-testid=\"exercise-count\">\n                  {exercises.length}\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2 text-white/90\">\n              <CheckCircle className=\"w-4 h-4 text-primary\" />\n              <div>\n                <div className=\"text-xs opacity-75\">Total Sets</div>\n                <div className=\"font-semibold\" data-testid=\"total-sets\">\n                  {getTotalSets()}\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2 text-white/90\">\n              <Clock className=\"w-4 h-4 text-primary\" />\n              <div>\n                <div className=\"text-xs opacity-75\">Est. Time</div>\n                <div className=\"font-semibold\" data-testid=\"estimated-time\">\n                  {getEstimatedTime()}min\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-white/75\">Progress</span>\n              <span className=\"text-white font-medium\" data-testid=\"progress-text\">\n                {completedExercises.size} of {exercises.length} completed\n              </span>\n            </div>\n            <Progress \n              value={completionPercentage} \n              className=\"h-2 bg-white/20\"\n              data-testid=\"progress-bar\"\n            />\n            {isSessionComplete && (\n              <div className=\"text-green-400 text-sm font-medium animate-fade-in\">\n                🎉 Session Complete! Great work!\n              </div>\n            )}\n          </div>\n        </div>\n      </GlassCard>\n\n      {/* Exercise List */}\n      <div className=\"space-y-4\">\n        {exercises.map((exercise) => (\n          <ExerciseCard\n            key={exercise.id}\n            exercise={exercise}\n            isCompleted={completedExercises.has(exercise.id)}\n            onComplete={handleExerciseComplete}\n          />\n        ))}\n      </div>\n\n      {/* Session Actions */}\n      {isSessionComplete && (\n        <GlassCard variant=\"secondary\" className=\"animate-slide-up\">\n          <div className=\"p-6 text-center\">\n            <Trophy className=\"w-12 h-12 text-yellow-400 mx-auto mb-3\" />\n            <h3 className=\"text-lg font-semibold text-white mb-2\">\n              Workout Complete!\n            </h3>\n            <p className=\"text-white/75 mb-4\">\n              You've finished all {exercises.length} exercises. Great job!\n            </p>\n            <div className=\"flex gap-3 justify-center\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setCompletedExercises(new Set())}\n                data-testid=\"restart-session-button\"\n              >\n                Restart Session\n              </Button>\n              <Button \n                onClick={() => console.log('Navigate to next workout')}\n                data-testid=\"next-workout-button\"\n              >\n                Next Workout\n              </Button>\n            </div>\n          </div>\n        </GlassCard>\n      )}\n    </div>\n  );\n}","size_bytes":6316},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Layout from \"@/components/Layout\";\nimport CSVUpload from \"@/components/CSVUpload\";\nimport WorkoutDayNav from \"@/components/WorkoutDayNav\";\nimport WorkoutSession from \"@/components/WorkoutSession\";\nimport ImportReport from \"@/components/ImportReport\";\nimport { parseCSV, ParsedExerciseData } from \"@/utils/csvParser\";\nimport { readFileAsText, validateCSVFile } from \"@/utils/fileReader\";\nimport { \n  saveWorkoutData, \n  loadWorkoutData, \n  clearWorkoutData,\n  saveSelectedDay,\n  loadSelectedDay\n} from \"@/utils/storage\";\nimport { Exercise } from \"@/components/ExerciseCard\";\nimport { Button } from \"@/components/ui/button\";\nimport GlassCard from \"@/components/GlassCard\";\nimport { Upload, Activity } from \"lucide-react\";\n\ninterface WorkoutDay {\n  id: string;\n  label: string;\n  machineKey: string;\n  exerciseCount: number;\n}\n\nexport default function Home() {\n  const [workoutData, setWorkoutData] = useState<ParsedExerciseData[]>([]);\n  const [workoutDays, setWorkoutDays] = useState<WorkoutDay[]>([]);\n  const [selectedDayId, setSelectedDayId] = useState<string>(\"\");\n  const [showImportReport, setShowImportReport] = useState(false);\n  const [importStats, setImportStats] = useState<any>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Load persisted data on mount\n  useEffect(() => {\n    const stored = loadWorkoutData();\n    if (stored && stored.data.length > 0) {\n      setWorkoutData(stored.data);\n      \n      // Group exercises by day\n      const dayGroups = stored.data.reduce((groups, exercise: any) => {\n        const dayId = exercise.dayKey;\n        if (!groups[dayId]) {\n          groups[dayId] = {\n            id: dayId,\n            label: exercise.day,\n            machineKey: exercise.dayKey,\n            exerciseCount: 0,\n            exercises: []\n          };\n        }\n        groups[dayId].exercises.push(exercise);\n        groups[dayId].exerciseCount++;\n        return groups;\n      }, {} as any);\n      \n      const days = Object.values(dayGroups) as WorkoutDay[];\n      setWorkoutDays(days);\n      \n      // Load saved selected day or default to first\n      const savedDay = loadSelectedDay();\n      const dayToSelect = savedDay && days.find(d => d.id === savedDay) ? savedDay : days[0]?.id || \"\";\n      setSelectedDayId(dayToSelect);\n      \n      console.log(`Loaded ${stored.data.length} exercises from storage (last imported: ${stored.lastImported})`);\n    }\n  }, []);\n\n  // Convert parsed data to Exercise format\n  const convertToExercise = (data: ParsedExerciseData): Exercise => ({\n    id: data.id,\n    name: data.exercise,\n    sets: data.sets,\n    repsMin: data.prescription.repsMin ?? undefined,\n    repsMax: data.prescription.repsMax ?? undefined,\n    timeSecondsMin: data.prescription.timeSecondsMin ?? undefined,\n    timeSecondsMax: data.prescription.timeSecondsMax ?? undefined,\n    stepsCount: data.prescription.stepsCount ?? undefined,\n    unit: data.prescription.unit,\n    perSide: data.prescription.perSide,\n    weight: data.weight,\n    notes: data.notes,\n    formGuidance: data.formGuidance,\n    muscleGroup: data.muscleGroup,\n    mainMuscle: data.mainMuscle\n  });\n\n  const handleFileSelect = (file: File) => {\n    setSelectedFile(file);\n    console.log(`CSV file selected: ${file.name}`);\n  };\n\n  const handleParseCSV = async () => {\n    if (!selectedFile) return;\n    \n    setIsProcessing(true);\n    console.log('Starting CSV parsing...');\n    \n    try {\n      // Validate file first\n      const validation = validateCSVFile(selectedFile);\n      if (!validation.isValid) {\n        console.error('File validation failed:', validation.error);\n        setIsProcessing(false);\n        return;\n      }\n      \n      // Read file content\n      const csvContent = await readFileAsText(selectedFile);\n      console.log(`File read successfully: ${csvContent.length} characters`);\n      \n      // Parse CSV content\n      const result = await parseCSV(csvContent);\n      \n      setWorkoutData(result.data);\n      setImportStats(result.stats);\n      \n      // Save to persistent storage\n      saveWorkoutData(result.data, selectedFile.name);\n      \n      // Group exercises by day\n      const dayGroups = result.data.reduce((groups, exercise) => {\n        const dayId = exercise.dayKey;\n        if (!groups[dayId]) {\n          groups[dayId] = {\n            id: dayId,\n            label: exercise.day,\n            machineKey: exercise.dayKey,\n            exerciseCount: 0,\n            exercises: []\n          };\n        }\n        groups[dayId].exercises.push(exercise);\n        groups[dayId].exerciseCount++;\n        return groups;\n      }, {} as any);\n      \n      const days = Object.values(dayGroups) as WorkoutDay[];\n      setWorkoutDays(days);\n      const newSelectedDay = days[0]?.id || \"\";\n      setSelectedDayId(newSelectedDay);\n      saveSelectedDay(newSelectedDay);\n      \n      setShowImportReport(true);\n      setIsProcessing(false);\n      \n      console.log(`Parsed ${result.data.length} exercises across ${days.length} workout days`);\n    } catch (error) {\n      console.error('CSV parsing failed:', error);\n      setIsProcessing(false);\n      // Could show error toast here\n    }\n  };\n\n  const getSelectedDayExercises = (): Exercise[] => {\n    if (!selectedDayId || !workoutData.length) return [];\n    \n    return workoutData\n      .filter(data => data.dayKey === selectedDayId)\n      .map(convertToExercise);\n  };\n\n  const getSelectedDayLabel = (): string => {\n    if (!selectedDayId || !workoutDays.length) return \"\";\n    return workoutDays.find(day => day.id === selectedDayId)?.label || \"\";\n  };\n\n  const handleStartDemo = async () => {\n    // Load demo data\n    const demoResult = await parseCSV(\"demo\");\n    setWorkoutData(demoResult.data);\n    \n    // Group demo exercises by day\n    const dayGroups = demoResult.data.reduce((groups, exercise) => {\n      const dayId = exercise.dayKey;\n      if (!groups[dayId]) {\n        groups[dayId] = {\n          id: dayId,\n          label: exercise.day,\n          machineKey: exercise.dayKey,\n          exerciseCount: 0,\n          exercises: []\n        };\n      }\n      groups[dayId].exercises.push(exercise);\n      groups[dayId].exerciseCount++;\n      return groups;\n    }, {} as any);\n    \n    const days = Object.values(dayGroups) as WorkoutDay[];\n    setWorkoutDays(days);\n    const newSelectedDay = days[0]?.id || \"\";\n    setSelectedDayId(newSelectedDay);\n    saveSelectedDay(newSelectedDay);\n    \n    // Save demo data to storage\n    saveWorkoutData(demoResult.data, 'Demo Workout');\n    \n    console.log('Demo workout loaded');\n  };\n\n  // Show CSV upload if no data\n  if (!workoutData.length) {\n    return (\n      <Layout>\n        <div className=\"max-w-2xl mx-auto space-y-6\">\n          {/* Welcome Section */}\n          <GlassCard variant=\"primary\">\n            <div className=\"p-8 text-center\">\n              <Activity className=\"w-16 h-16 text-primary mx-auto mb-4\" />\n              <h1 className=\"text-3xl font-bold text-white mb-3\" data-testid=\"welcome-title\">\n                Welcome to FitTracker\n              </h1>\n              <p className=\"text-white/80 mb-6 text-lg\">\n                Your glass morphism fitness training companion with advanced CSV parsing\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                <Button \n                  onClick={handleStartDemo}\n                  size=\"lg\"\n                  data-testid=\"demo-button\"\n                >\n                  Try Demo Workout\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  size=\"lg\"\n                  onClick={() => document.getElementById('csv-upload')?.scrollIntoView()}\n                  data-testid=\"upload-button\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Upload CSV\n                </Button>\n              </div>\n            </div>\n          </GlassCard>\n\n          {/* CSV Upload Section */}\n          <div id=\"csv-upload\">\n            <CSVUpload\n              onFileSelect={handleFileSelect}\n              onParse={handleParseCSV}\n              isProcessing={isProcessing}\n            />\n          </div>\n\n          {/* Import Report */}\n          {showImportReport && importStats && selectedFile && (\n            <ImportReport\n              stats={importStats}\n              filename={selectedFile.name}\n              onClose={() => setShowImportReport(false)}\n            />\n          )}\n        </div>\n      </Layout>\n    );\n  }\n\n  // Show workout interface\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        {/* Workout Day Navigation */}\n        <WorkoutDayNav\n          days={workoutDays}\n          activeDayId={selectedDayId}\n          onDaySelect={(dayId) => {\n            setSelectedDayId(dayId);\n            saveSelectedDay(dayId);\n          }}\n        />\n\n        {/* Current Workout Session */}\n        {selectedDayId && (\n          <WorkoutSession\n            dayLabel={getSelectedDayLabel()}\n            exercises={getSelectedDayExercises()}\n            onExerciseComplete={(exerciseId) => \n              console.log(`Exercise completed: ${exerciseId}`)\n            }\n            onSessionComplete={() => \n              console.log('Workout session completed!')\n            }\n          />\n        )}\n\n        {/* Quick Actions */}\n        <GlassCard variant=\"tertiary\">\n          <div className=\"p-4 flex flex-col sm:flex-row gap-3 justify-center\">\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                clearWorkoutData();\n                setWorkoutData([]);\n                setWorkoutDays([]);\n                setSelectedDayId(\"\");\n              }}\n              data-testid=\"reset-button\"\n            >\n              Import New CSV\n            </Button>\n            <Button \n              variant=\"ghost\"\n              onClick={() => setShowImportReport(true)}\n              data-testid=\"show-report-button\"\n            >\n              View Import Report\n            </Button>\n          </div>\n        </GlassCard>\n\n        {/* Import Report Modal */}\n        {showImportReport && importStats && selectedFile && (\n          <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n            <div className=\"max-w-lg w-full\">\n              <ImportReport\n                stats={importStats}\n                filename={selectedFile.name}\n                onClose={() => setShowImportReport(false)}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </Layout>\n  );\n}","size_bytes":10707},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/utils/csvParser.ts":{"content":"// CSV Parsing utilities following the specification\n\nexport interface ParsedPrescription {\n  unit: 'reps' | 'seconds' | 'steps';\n  repsMin: number | null;\n  repsMax: number | null;\n  timeSecondsMin: number | null;\n  timeSecondsMax: number | null;\n  stepsCount: number | null;\n  perSide: boolean;\n}\n\nexport interface RawExerciseData {\n  Day: string;\n  Exercise: string;\n  Sets: number;\n  'Reps/Time': string;\n  Weight?: number;\n  Notes?: string;\n  'Form Guidance'?: string;\n  'Muscle Group': string;\n  'Main Muscle': string;\n}\n\nexport interface ParsedExerciseData {\n  id: string;\n  day: string;\n  dayKey: string;\n  exercise: string;\n  sets: number;\n  prescription: ParsedPrescription;\n  weight?: number;\n  notes?: string;\n  formGuidance?: string;\n  muscleGroup: string;\n  mainMuscle: string;\n}\n\n// Prescription parser following the specification rules\nexport function parsePrescription(raw: string | null | undefined): ParsedPrescription {\n  const out: ParsedPrescription = { \n    unit: \"reps\", \n    repsMin: null, \n    repsMax: null, \n    timeSecondsMin: null, \n    timeSecondsMax: null, \n    stepsCount: null, \n    perSide: false \n  };\n  \n  if (raw == null) return out;\n  \n  let s = String(raw).trim().toLowerCase();\n  \n  // Detect per side intent\n  out.perSide = /(per\\s*(side|leg)|\\/side|\\/leg)/i.test(s);\n  \n  // Convert ranges to canonical form \"A to B\"\n  s = s.replace(/(\\d+)\\D+(\\d+)/, \"$1 to $2 \");\n  \n  // Time in minutes\n  if (/\\bmin\\b/.test(s)) {\n    const m = s.match(/(\\d+)\\s*min/);\n    if (m) { \n      out.unit = \"seconds\"; \n      out.timeSecondsMin = Number(m[1]) * 60; \n      out.timeSecondsMax = out.timeSecondsMin; \n      return out; \n    }\n  }\n  \n  // Steps\n  if (/\\bsteps?\\b/.test(s)) {\n    const m = s.match(/(\\d+)\\s*steps?/);\n    if (m) { \n      out.unit = \"steps\"; \n      out.stepsCount = Number(m[1]); \n      return out; \n    }\n  }\n  \n  // Time in seconds\n  if (/\\bs\\b/.test(s)) {\n    const r = s.match(/(\\d+)\\s*to\\s*(\\d+)\\s*s/);\n    if (r) { \n      out.unit = \"seconds\"; \n      out.timeSecondsMin = Number(r[1]); \n      out.timeSecondsMax = Number(r[2]); \n      return out; \n    }\n    const m = s.match(/(\\d+)\\s*s/);\n    if (m) { \n      out.unit = \"seconds\"; \n      out.timeSecondsMin = Number(m[1]); \n      out.timeSecondsMax = Number(m[1]); \n      return out; \n    }\n  }\n  \n  // Reps (default)\n  const rr = s.match(/(\\d+)\\s*to\\s*(\\d+)/);\n  if (rr) { \n    out.unit = \"reps\"; \n    out.repsMin = Number(rr[1]); \n    out.repsMax = Number(rr[2]); \n    return out; \n  }\n  \n  const r1 = s.match(/^\\s*(\\d+)\\s*$/);\n  if (r1) { \n    out.unit = \"reps\"; \n    out.repsMin = Number(r1[1]); \n    out.repsMax = Number(r1[1]); \n    return out; \n  }\n  \n  return out;\n}\n\n// Create machine-friendly key from day label\nexport function createDayKey(dayLabel: string): string {\n  return dayLabel\n    .toLowerCase()\n    .replace(/\\s+/g, '_')\n    .replace(/[^\\w_]/g, '');\n}\n\n// Create muscle group slug\nexport function createMuscleSlug(muscleGroup: string): string {\n  return muscleGroup\n    .toLowerCase()\n    .replace(/\\s+/g, '_')\n    .replace(/[^\\w_]/g, '');\n}\n\nimport Papa from 'papaparse';\n\n// Real CSV parsing function using Papa Parse\nexport function parseCSV(csvContent: string): Promise<{\n  data: ParsedExerciseData[];\n  stats: {\n    totalRows: number;\n    validRows: number;\n    invalidRows: number;\n    unitCounts: { reps: number; seconds: number; steps: number };\n    malformedTokens: string[];\n    parsingTime: number;\n  };\n}> {\n  return new Promise((resolve) => {\n    const startTime = Date.now();\n    const data: ParsedExerciseData[] = [];\n    const malformedTokens: string[] = [];\n    const unitCounts = { reps: 0, seconds: 0, steps: 0 };\n\n    Papa.parse<RawExerciseData>(csvContent, {\n      header: true,\n      dynamicTyping: true,\n      skipEmptyLines: true,\n      transformHeader: (header: string) => header.trim(),\n      complete: (results) => {\n        let validRows = 0;\n\n        results.data.forEach((row, index) => {\n          // Validate required fields\n          if (!row.Day || !row.Exercise || !row.Sets || row.Sets <= 0) {\n            return; // Skip invalid rows\n          }\n\n          const prescription = parsePrescription(row['Reps/Time']);\n\n          // Check if prescription parsing failed and add to malformed tokens\n          if (prescription.unit === 'reps' && \n              prescription.repsMin === null && \n              prescription.repsMax === null &&\n              row['Reps/Time']) {\n            malformedTokens.push(row['Reps/Time']);\n          }\n\n          unitCounts[prescription.unit]++;\n\n          const parsed: ParsedExerciseData = {\n            id: `exercise-${index + 1}`,\n            day: row.Day,\n            dayKey: createDayKey(row.Day),\n            exercise: row.Exercise,\n            sets: row.Sets,\n            prescription,\n            weight: row.Weight || undefined,\n            notes: row.Notes?.trim() || undefined,\n            formGuidance: row['Form Guidance']?.trim() || undefined,\n            muscleGroup: row['Muscle Group'] || 'Unknown',\n            mainMuscle: row['Main Muscle'] || 'Unknown'\n          };\n\n          data.push(parsed);\n          validRows++;\n        });\n\n        const parsingTime = Date.now() - startTime;\n\n        resolve({\n          data,\n          stats: {\n            totalRows: results.data.length,\n            validRows,\n            invalidRows: results.data.length - validRows,\n            unitCounts,\n            malformedTokens,\n            parsingTime\n          }\n        });\n      },\n      error: (error: any) => {\n        console.error('CSV parsing error:', error);\n        // Fallback to mock data on error\n        resolve(createMockData());\n      }\n    });\n  });\n}\n\n// Fallback mock data function\nfunction createMockData() {\n  const startTime = Date.now();\n  const mockRawData: RawExerciseData[] = [\n    {\n      Day: \"Day 1 – Push\",\n      Exercise: \"Bench Press\",\n      Sets: 4,\n      'Reps/Time': \"8-12\",\n      Weight: 80,\n      Notes: \"Focus on controlled movement\\nPause at chest\",\n      'Form Guidance': \"Keep shoulders retracted\",\n      'Muscle Group': \"Chest + Triceps\",\n      'Main Muscle': \"Upper Chest\"\n    },\n    {\n      Day: \"Day 1 – Push\", \n      Exercise: \"Incline Dumbbell Press\",\n      Sets: 3,\n      'Reps/Time': \"10 to 15\",\n      Weight: 32.5,\n      'Form Guidance': \"45-degree incline\",\n      'Muscle Group': \"Chest + Triceps\",\n      'Main Muscle': \"Upper Chest\"\n    },\n    {\n      Day: \"Day 2 – Pull\",\n      Exercise: \"Pull-ups\",\n      Sets: 3,\n      'Reps/Time': \"8-12\",\n      'Muscle Group': \"Back + Biceps\",\n      'Main Muscle': \"Lats\"\n    },\n    {\n      Day: \"Day 2 – Pull\",\n      Exercise: \"Plank Hold\",\n      Sets: 3,\n      'Reps/Time': \"30-60s\",\n      Notes: \"Hold position, breathe steadily\",\n      'Muscle Group': \"Core\",\n      'Main Muscle': \"Abs\"\n    }\n  ];\n\n  const data: ParsedExerciseData[] = [];\n  const malformedTokens: string[] = [];\n  const unitCounts = { reps: 0, seconds: 0, steps: 0 };\n\n  mockRawData.forEach((row, index) => {\n    const prescription = parsePrescription(row['Reps/Time']);\n    unitCounts[prescription.unit]++;\n    \n    const parsed: ParsedExerciseData = {\n      id: `exercise-${index + 1}`,\n      day: row.Day,\n      dayKey: createDayKey(row.Day),\n      exercise: row.Exercise,\n      sets: row.Sets,\n      prescription,\n      weight: row.Weight,\n      notes: row.Notes?.trim(),\n      formGuidance: row['Form Guidance']?.trim(),\n      muscleGroup: row['Muscle Group'],\n      mainMuscle: row['Main Muscle']\n    };\n    \n    data.push(parsed);\n  });\n\n  return {\n    data,\n    stats: {\n      totalRows: mockRawData.length,\n      validRows: mockRawData.length,\n      invalidRows: 0,\n      unitCounts,\n      malformedTokens,\n      parsingTime: Date.now() - startTime\n    }\n  };\n}","size_bytes":7742},"client/src/utils/fileReader.ts":{"content":"// File reading utility for CSV files\n\nexport function readFileAsText(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    \n    reader.onload = (event) => {\n      const result = event.target?.result;\n      if (typeof result === 'string') {\n        resolve(result);\n      } else {\n        reject(new Error('Failed to read file as text'));\n      }\n    };\n    \n    reader.onerror = () => {\n      reject(new Error('File reading error'));\n    };\n    \n    reader.readAsText(file, 'utf-8');\n  });\n}\n\nexport function validateCSVFile(file: File): { isValid: boolean; error?: string } {\n  if (!file) {\n    return { isValid: false, error: 'No file provided' };\n  }\n  \n  if (file.size === 0) {\n    return { isValid: false, error: 'File is empty' };\n  }\n  \n  if (file.size > 10 * 1024 * 1024) { // 10MB limit\n    return { isValid: false, error: 'File is too large (max 10MB)' };\n  }\n  \n  const validTypes = ['text/csv', 'application/csv'];\n  const hasValidType = validTypes.includes(file.type) || file.name.toLowerCase().endsWith('.csv');\n  \n  if (!hasValidType) {\n    return { isValid: false, error: 'Invalid file type. Please select a CSV file.' };\n  }\n  \n  return { isValid: true };\n}","size_bytes":1237},"client/src/utils/storage.ts":{"content":"// Local storage utilities for workout data persistence\n\nconst STORAGE_KEYS = {\n  WORKOUT_DATA: 'fittracker_workout_data',\n  COMPLETED_EXERCISES: 'fittracker_completed_exercises',\n  SELECTED_DAY: 'fittracker_selected_day'\n} as const;\n\nexport interface StoredWorkoutData {\n  data: any[];\n  lastImported: string;\n  filename?: string;\n}\n\nexport interface CompletedExercise {\n  exerciseId: string;\n  dayId: string;\n  completedAt: string;\n}\n\n// Workout data persistence\nexport function saveWorkoutData(data: any[], filename?: string): void {\n  try {\n    const storedData: StoredWorkoutData = {\n      data,\n      lastImported: new Date().toISOString(),\n      filename\n    };\n    localStorage.setItem(STORAGE_KEYS.WORKOUT_DATA, JSON.stringify(storedData));\n    console.log('Workout data saved to localStorage');\n  } catch (error) {\n    console.error('Failed to save workout data:', error);\n  }\n}\n\nexport function loadWorkoutData(): StoredWorkoutData | null {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.WORKOUT_DATA);\n    return stored ? JSON.parse(stored) : null;\n  } catch (error) {\n    console.error('Failed to load workout data:', error);\n    return null;\n  }\n}\n\nexport function clearWorkoutData(): void {\n  localStorage.removeItem(STORAGE_KEYS.WORKOUT_DATA);\n  localStorage.removeItem(STORAGE_KEYS.COMPLETED_EXERCISES);\n  localStorage.removeItem(STORAGE_KEYS.SELECTED_DAY);\n  console.log('Workout data cleared from localStorage');\n}\n\n// Exercise completion state\nexport function saveCompletedExercise(exerciseId: string, dayId: string): void {\n  try {\n    const completed = loadCompletedExercises();\n    const newCompletion: CompletedExercise = {\n      exerciseId,\n      dayId,\n      completedAt: new Date().toISOString()\n    };\n    \n    // Remove existing completion for this exercise (toggle behavior)\n    const filtered = completed.filter(c => c.exerciseId !== exerciseId || c.dayId !== dayId);\n    filtered.push(newCompletion);\n    \n    localStorage.setItem(STORAGE_KEYS.COMPLETED_EXERCISES, JSON.stringify(filtered));\n  } catch (error) {\n    console.error('Failed to save exercise completion:', error);\n  }\n}\n\nexport function removeCompletedExercise(exerciseId: string, dayId: string): void {\n  try {\n    const completed = loadCompletedExercises();\n    const filtered = completed.filter(c => !(c.exerciseId === exerciseId && c.dayId === dayId));\n    localStorage.setItem(STORAGE_KEYS.COMPLETED_EXERCISES, JSON.stringify(filtered));\n  } catch (error) {\n    console.error('Failed to remove exercise completion:', error);\n  }\n}\n\nexport function loadCompletedExercises(): CompletedExercise[] {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.COMPLETED_EXERCISES);\n    return stored ? JSON.parse(stored) : [];\n  } catch (error) {\n    console.error('Failed to load completed exercises:', error);\n    return [];\n  }\n}\n\nexport function isExerciseCompleted(exerciseId: string, dayId: string): boolean {\n  const completed = loadCompletedExercises();\n  return completed.some(c => c.exerciseId === exerciseId && c.dayId === dayId);\n}\n\n// Selected day persistence\nexport function saveSelectedDay(dayId: string): void {\n  try {\n    localStorage.setItem(STORAGE_KEYS.SELECTED_DAY, dayId);\n  } catch (error) {\n    console.error('Failed to save selected day:', error);\n  }\n}\n\nexport function loadSelectedDay(): string | null {\n  try {\n    return localStorage.getItem(STORAGE_KEYS.SELECTED_DAY);\n  } catch (error) {\n    console.error('Failed to load selected day:', error);\n    return null;\n  }\n}","size_bytes":3511},"client/src/components/examples/CSVUpload.tsx":{"content":"import CSVUpload from '../CSVUpload';\n\nexport default function CSVUploadExample() {\n  return (\n    <div className=\"bg-gradient-to-br from-blue-600 to-purple-700 min-h-screen p-4\">\n      <div className=\"max-w-md mx-auto pt-20\">\n        <CSVUpload\n          onFileSelect={(file) => console.log('File selected:', file.name)}\n          onParse={(data) => console.log('Parsed data:', data)}\n          isProcessing={false}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":458},"client/src/components/examples/ExerciseCard.tsx":{"content":"import ExerciseCard, { Exercise } from '../ExerciseCard';\n\nexport default function ExerciseCardExample() {\n  const mockExercises: Exercise[] = [\n    {\n      id: '1',\n      name: 'Bench Press',\n      sets: 4,\n      repsMin: 8,\n      repsMax: 12,\n      unit: 'reps',\n      perSide: false,\n      weight: 80,\n      notes: 'Focus on controlled movement\\nPause at chest for 1 second',\n      formGuidance: 'Keep shoulders retracted and feet flat on floor',\n      muscleGroup: 'Chest + Triceps',\n      mainMuscle: 'Upper Chest'\n    },\n    {\n      id: '2', \n      name: 'Plank Hold',\n      sets: 3,\n      timeSecondsMin: 30,\n      timeSecondsMax: 60,\n      unit: 'seconds',\n      perSide: false,\n      notes: 'Hold position, breathe steadily',\n      formGuidance: 'Keep core tight, straight line from head to heels',\n      muscleGroup: 'Core',\n      mainMuscle: 'Abs'\n    },\n    {\n      id: '3',\n      name: 'Bulgarian Split Squats',\n      sets: 3,\n      repsMin: 12,\n      repsMax: 15,\n      unit: 'reps',\n      perSide: true,\n      weight: 25,\n      formGuidance: 'Keep front knee over ankle, control the descent',\n      muscleGroup: 'Legs',\n      mainMuscle: 'Quadriceps'\n    }\n  ];\n\n  return (\n    <div className=\"bg-gradient-to-br from-blue-600 to-purple-700 min-h-screen p-4 space-y-6\">\n      {mockExercises.map((exercise) => (\n        <ExerciseCard \n          key={exercise.id}\n          exercise={exercise}\n          onComplete={(id) => console.log(`Completed exercise: ${id}`)}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":1516},"client/src/components/examples/GlassCard.tsx":{"content":"import GlassCard from '../GlassCard';\n\nexport default function GlassCardExample() {\n  return (\n    <div className=\"space-y-4 p-4 bg-gradient-to-br from-blue-600 to-purple-700 min-h-screen\">\n      <GlassCard variant=\"primary\">\n        <div className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-2\">Primary Glass Card</h3>\n          <p className=\"text-white/90\">This is a primary glass morphism card with backdrop blur and translucent styling.</p>\n        </div>\n      </GlassCard>\n      \n      <GlassCard variant=\"secondary\">\n        <div className=\"p-4\">\n          <h3 className=\"text-md font-medium text-white\">Secondary Card</h3>\n          <p className=\"text-white/80 text-sm\">More subtle glass effect for secondary content.</p>\n        </div>\n      </GlassCard>\n      \n      <GlassCard variant=\"tertiary\" onClick={() => console.log('Tertiary card clicked')}>\n        <div className=\"p-3\">\n          <h3 className=\"text-sm font-medium text-white\">Clickable Tertiary</h3>\n          <p className=\"text-white/70 text-xs\">Light glass effect with click interaction.</p>\n        </div>\n      </GlassCard>\n    </div>\n  );\n}","size_bytes":1141},"client/src/components/examples/ImportReport.tsx":{"content":"import ImportReport from '../ImportReport';\n\nexport default function ImportReportExample() {\n  const mockStats = {\n    totalRows: 45,\n    validRows: 42,\n    invalidRows: 3,\n    unitCounts: {\n      reps: 28,\n      seconds: 12,\n      steps: 2\n    },\n    malformedTokens: [\n      \"15-20reps\",\n      \"30sec hold\",\n      \"walk 100 steps forward\",\n      \"10x each side\",\n      \"failure set\"\n    ],\n    parsingTime: 156\n  };\n\n  return (\n    <div className=\"bg-gradient-to-br from-blue-600 to-purple-700 min-h-screen p-4\">\n      <div className=\"max-w-lg mx-auto pt-10\">\n        <ImportReport \n          stats={mockStats}\n          filename=\"TREINO SETEMBRO.csv\"\n          onClose={() => console.log('Report closed')}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":750},"client/src/components/examples/Layout.tsx":{"content":"import Layout from '../Layout';\nimport GlassCard from '../GlassCard';\n\nexport default function LayoutExample() {\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        <GlassCard variant=\"primary\">\n          <div className=\"p-6\">\n            <h2 className=\"text-xl font-semibold text-white mb-3\">Welcome to FitTracker</h2>\n            <p className=\"text-white/80 mb-4\">\n              This is the main content area within the glass morphism layout. \n              The header is sticky with theme toggle and menu options.\n            </p>\n            <div className=\"space-y-2 text-white/70 text-sm\">\n              <p>• Mobile-first responsive design</p>\n              <p>• Safe area insets for iPhone 16 Pro</p>\n              <p>• Glass morphism with backdrop blur</p>\n              <p>• Dark/light mode support</p>\n            </div>\n          </div>\n        </GlassCard>\n\n        <GlassCard variant=\"secondary\">\n          <div className=\"p-4\">\n            <h3 className=\"text-lg font-medium text-white mb-2\">Secondary Content</h3>\n            <p className=\"text-white/75 text-sm\">\n              Additional content cards use different glass opacities for visual hierarchy.\n            </p>\n          </div>\n        </GlassCard>\n\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          <GlassCard variant=\"tertiary\">\n            <div className=\"p-4 text-center\">\n              <h4 className=\"text-white font-medium\">Feature 1</h4>\n              <p className=\"text-white/60 text-sm mt-1\">Sample content</p>\n            </div>\n          </GlassCard>\n          <GlassCard variant=\"tertiary\">\n            <div className=\"p-4 text-center\">\n              <h4 className=\"text-white font-medium\">Feature 2</h4>\n              <p className=\"text-white/60 text-sm mt-1\">Sample content</p>\n            </div>\n          </GlassCard>\n        </div>\n      </div>\n    </Layout>\n  );\n}","size_bytes":1892},"client/src/components/examples/WorkoutDayNav.tsx":{"content":"import WorkoutDayNav from '../WorkoutDayNav';\n\nexport default function WorkoutDayNavExample() {\n  const mockDays = [\n    { id: '1', label: 'Day 1 - Push', machineKey: 'day_1_push', exerciseCount: 6 },\n    { id: '2', label: 'Day 2 - Pull', machineKey: 'day_2_pull', exerciseCount: 5 },\n    { id: '3', label: 'Day 3 - Legs', machineKey: 'day_3_legs', exerciseCount: 7 },\n    { id: '4', label: 'Day 4 - Arms', machineKey: 'day_4_arms', exerciseCount: 4 },\n  ];\n\n  return (\n    <div className=\"bg-gradient-to-br from-blue-600 to-purple-700 min-h-screen p-4\">\n      <WorkoutDayNav \n        days={mockDays}\n        activeDayId=\"1\"\n        onDaySelect={(dayId) => console.log('Day selected:', dayId)}\n      />\n    </div>\n  );\n}","size_bytes":720},"client/src/components/examples/WorkoutSession.tsx":{"content":"import WorkoutSession from '../WorkoutSession';\nimport { Exercise } from '../ExerciseCard';\n\nexport default function WorkoutSessionExample() {\n  const mockExercises: Exercise[] = [\n    {\n      id: '1',\n      name: 'Bench Press',\n      sets: 4,\n      repsMin: 8,\n      repsMax: 12,\n      unit: 'reps',\n      perSide: false,\n      weight: 80,\n      notes: 'Focus on controlled movement',\n      formGuidance: 'Keep shoulders retracted and feet flat on floor',\n      muscleGroup: 'Chest + Triceps',\n      mainMuscle: 'Upper Chest'\n    },\n    {\n      id: '2',\n      name: 'Incline Dumbbell Press', \n      sets: 3,\n      repsMin: 10,\n      repsMax: 15,\n      unit: 'reps',\n      perSide: false,\n      weight: 32.5,\n      formGuidance: '45-degree incline, control the weight',\n      muscleGroup: 'Chest + Triceps',\n      mainMuscle: 'Upper Chest'\n    },\n    {\n      id: '3',\n      name: 'Push-ups',\n      sets: 3,\n      repsMin: 15,\n      repsMax: 20,\n      unit: 'reps', \n      perSide: false,\n      notes: 'If too easy, elevate feet',\n      formGuidance: 'Full range of motion, chest to floor',\n      muscleGroup: 'Chest + Triceps',\n      mainMuscle: 'Chest'\n    },\n    {\n      id: '4',\n      name: 'Tricep Dips',\n      sets: 2,\n      repsMin: 12,\n      repsMax: 15,\n      unit: 'reps',\n      perSide: false,\n      formGuidance: 'Keep elbows close to body, controlled movement',\n      muscleGroup: 'Triceps',\n      mainMuscle: 'Triceps'\n    }\n  ];\n\n  return (\n    <div className=\"bg-gradient-to-br from-blue-600 to-purple-700 min-h-screen p-4\">\n      <WorkoutSession\n        dayLabel=\"Day 1 - Push\"\n        exercises={mockExercises}\n        onExerciseComplete={(id) => console.log('Exercise completed:', id)}\n        onSessionComplete={() => console.log('Session completed!')}\n      />\n    </div>\n  );\n}","size_bytes":1798},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/SetList.tsx":{"content":"import { useCallback, useMemo } from \"react\";\nimport { SetRow } from \"./SetRow\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport GlassCard from \"./GlassCard\";\nimport { SessionExercise, WorkoutProgress, SetProgress } from \"@shared/schema\";\nimport { saveWorkoutProgress } from \"@/utils/sessionStorage\";\nimport { createEmptySetProgress, createEmptyWorkoutProgress } from \"@/utils/workoutHelpers\";\n\ninterface SetListProps {\n  sessionId: string;\n  currentExercise: SessionExercise;\n  workoutProgress: WorkoutProgress[];\n  onProgressUpdate: (updatedProgress: WorkoutProgress[]) => void;\n}\n\nexport default function SetList({ \n  sessionId, \n  currentExercise, \n  workoutProgress, \n  onProgressUpdate \n}: SetListProps) {\n  // Get current exercise progress or create empty one\n  const currentExerciseProgress = useMemo(() => {\n    return workoutProgress.find(p => p.exerciseId === currentExercise.id) \n      || createEmptyWorkoutProgress(sessionId, currentExercise.id);\n  }, [workoutProgress, currentExercise.id, sessionId]);\n  \n  // Generate sets data from exercise definition and current progress\n  // Allow dynamic expansion beyond template definition\n  const sets = useMemo(() => {\n    const setsArray = [];\n    // Use the maximum of template sets or actual progress sets\n    const maxSets = Math.max(currentExercise.sets, currentExerciseProgress.sets.length);\n    \n    for (let i = 0; i < maxSets; i++) {\n      const setNumber = i + 1;\n      const setProgress = currentExerciseProgress.sets.find(s => s.setNumber === setNumber)\n        || createEmptySetProgress(setNumber);\n      \n      setsArray.push({\n        setNumber,\n        setProgress,\n        // Default values based on exercise definition\n        defaultReps: currentExercise.unit === 'reps' ? (currentExercise.repsMin || 8) : 0,\n        defaultWeight: currentExercise.weight || 0,\n        defaultTimeSeconds: currentExercise.unit === 'seconds' ? (currentExercise.timeSecondsMin || 30) : 0,\n        defaultSteps: currentExercise.unit === 'steps' ? (currentExercise.stepsCount || 10) : 0\n      });\n    }\n    return setsArray;\n  }, [currentExercise, currentExerciseProgress]);\n\n  const updateProgress = useCallback((updatedExerciseProgress: WorkoutProgress) => {\n    // Update the workout progress and save to storage\n    saveWorkoutProgress(updatedExerciseProgress);\n    \n    // Update parent state\n    const updatedProgressList = workoutProgress.map(p => \n      p.exerciseId === updatedExerciseProgress.exerciseId ? updatedExerciseProgress : p\n    );\n    \n    // If this exercise progress didn't exist before, add it\n    if (!workoutProgress.find(p => p.exerciseId === updatedExerciseProgress.exerciseId)) {\n      updatedProgressList.push(updatedExerciseProgress);\n    }\n    \n    onProgressUpdate(updatedProgressList);\n  }, [workoutProgress, onProgressUpdate]);\n\n  const handleSetChange = useCallback((setNumber: number, data: { reps: number; weight: number }) => {\n    // Update the set progress with new values - use proper immutable updates\n    let updatedProgress = { ...currentExerciseProgress, sets: [...currentExerciseProgress.sets] };\n    \n    // Ensure we have enough set entries\n    while (updatedProgress.sets.length < setNumber) {\n      updatedProgress.sets.push(createEmptySetProgress(updatedProgress.sets.length + 1));\n    }\n    \n    // Update the specific set and reset completion flag if values changed\n    updatedProgress.sets = updatedProgress.sets.map(set => {\n      if (set.setNumber === setNumber) {\n        const newReps = currentExercise.unit === 'reps' ? data.reps : set.reps;\n        const newTimeSeconds = currentExercise.unit === 'seconds' ? data.reps : set.timeSeconds;\n        const newSteps = currentExercise.unit === 'steps' ? data.reps : set.steps;\n        const newWeight = data.weight > 0 ? data.weight : undefined;\n        \n        // Check if values actually changed to reset completion\n        const repsChanged = newReps !== set.reps;\n        const timeChanged = newTimeSeconds !== set.timeSeconds;\n        const stepsChanged = newSteps !== set.steps;\n        const weightChanged = newWeight !== set.weight;\n        \n        const shouldResetCompletion = set.completed && (repsChanged || timeChanged || stepsChanged || weightChanged);\n        \n        return {\n          ...set,\n          reps: newReps,\n          weight: newWeight,\n          timeSeconds: newTimeSeconds,\n          steps: newSteps,\n          // Reset completion flag if values changed\n          completed: shouldResetCompletion ? false : set.completed,\n          completedAt: shouldResetCompletion ? undefined : set.completedAt\n        };\n      }\n      return set;\n    });\n    \n    updateProgress(updatedProgress);\n  }, [currentExerciseProgress, currentExercise.unit, updateProgress]);\n\n  const handleToggleComplete = useCallback((setNumber: number) => {\n    let updatedProgress = { ...currentExerciseProgress, sets: [...currentExerciseProgress.sets] };\n    \n    // Ensure we have enough set entries\n    while (updatedProgress.sets.length < setNumber) {\n      updatedProgress.sets.push(createEmptySetProgress(updatedProgress.sets.length + 1));\n    }\n    \n    // Toggle completion status\n    updatedProgress.sets = updatedProgress.sets.map(set => \n      set.setNumber === setNumber \n        ? { \n            ...set, \n            completed: !set.completed,\n            completedAt: !set.completed ? new Date().toISOString() : undefined\n          }\n        : set\n    );\n    \n    updateProgress(updatedProgress);\n  }, [currentExerciseProgress, updateProgress]);\n\n  const handleRemoveSet = useCallback((setNumber: number) => {\n    // Prevent removing if only one set remains\n    if (sets.length <= 1) {\n      alert('Cannot remove the last set. At least one set is required.');\n      return;\n    }\n    \n    let updatedProgress = { ...currentExerciseProgress, sets: [...currentExerciseProgress.sets] };\n    \n    // Remove the set and renumber remaining sets\n    const filteredSets = updatedProgress.sets\n      .filter(set => set.setNumber !== setNumber)\n      .map((set, index) => ({\n        ...set,\n        setNumber: index + 1 // Renumber sets to maintain sequence\n      }));\n    \n    updatedProgress.sets = filteredSets;\n    updateProgress(updatedProgress);\n  }, [currentExerciseProgress, sets.length, updateProgress]);\n\n  const handleAddSet = useCallback(() => {\n    let updatedProgress = { ...currentExerciseProgress, sets: [...currentExerciseProgress.sets] };\n    \n    // Create new set with default values\n    const newSetNumber = sets.length + 1;\n    const newSet = createEmptySetProgress(newSetNumber);\n    \n    // Set default values based on exercise type\n    if (currentExercise.unit === 'reps') {\n      newSet.reps = currentExercise.repsMin || 8;\n    } else if (currentExercise.unit === 'seconds') {\n      newSet.timeSeconds = currentExercise.timeSecondsMin || 30;\n    } else if (currentExercise.unit === 'steps') {\n      newSet.steps = currentExercise.stepsCount || 10;\n    }\n    \n    if (currentExercise.weight && currentExercise.weight > 0) {\n      newSet.weight = currentExercise.weight;\n    }\n    \n    updatedProgress.sets.push(newSet);\n    updateProgress(updatedProgress);\n  }, [currentExerciseProgress, sets.length, currentExercise, updateProgress]);\n\n  return (\n    <GlassCard variant=\"tertiary\" className=\"overflow-hidden\">\n      <div className=\"p-4\">\n        <h3 className=\"text-lg font-semibold text-white mb-4 text-center\">\n          Set Progress\n        </h3>\n        \n        {/* Sets Container with max height for mobile viewport */}\n        <div className=\"set-list-container space-y-3 mb-4\">\n          {sets.map((set) => {\n            const displayValue = currentExercise.unit === 'reps' ? \n              (set.setProgress.reps ?? set.defaultReps) :\n              currentExercise.unit === 'seconds' ?\n              (set.setProgress.timeSeconds ?? set.defaultTimeSeconds) :\n              (set.setProgress.steps ?? set.defaultSteps);\n              \n            return (\n              <SetRow\n                key={set.setNumber}\n                index={set.setNumber}\n                reps={displayValue}\n                weight={set.setProgress.weight ?? set.defaultWeight}\n                completed={set.setProgress.completed}\n                unit={currentExercise.unit}\n                perSide={currentExercise.perSide}\n                onChange={(data) => handleSetChange(set.setNumber, data)}\n                onToggleComplete={() => handleToggleComplete(set.setNumber)}\n                onRemove={() => handleRemoveSet(set.setNumber)}\n              />\n            );\n          })}\n        </div>\n\n        \n        {/* Template info */}\n        {sets.length !== currentExercise.sets && (\n          <div className=\"text-center text-white/60 text-xs mt-2\">\n            Template: {currentExercise.sets} sets, Current: {sets.length} sets\n          </div>\n        )}\n      </div>\n    </GlassCard>\n  );\n}","size_bytes":8920},"client/src/components/SetRow.tsx":{"content":"import { useState, useCallback, memo, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  CheckCircle, \n  Circle, \n  Plus, \n  Minus, \n  MoreHorizontal,\n  Trash2\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface SetRowProps {\n  index: number;\n  reps: number;\n  weight: number;\n  completed: boolean;\n  unit: 'reps' | 'seconds' | 'steps';\n  perSide?: boolean;\n  onChange: (data: { reps: number; weight: number }) => void;\n  onToggleComplete: () => void;\n  onRemove: () => void;\n}\n\ninterface EditState {\n  isEditing: 'reps' | 'weight' | null;\n  reps: number;\n  weight: number;\n}\n\nexport const SetRow = memo(function SetRow({\n  index,\n  reps,\n  weight,\n  completed,\n  unit,\n  perSide = false,\n  onChange,\n  onToggleComplete,\n  onRemove\n}: SetRowProps) {\n  const [editState, setEditState] = useState<EditState>({\n    isEditing: null,\n    reps,\n    weight\n  });\n\n  // Refs for input elements and row\n  const repsInputRef = useRef<HTMLInputElement>(null);\n  const weightInputRef = useRef<HTMLInputElement>(null);\n  const rowRef = useRef<HTMLDivElement>(null);\n\n  const startEditing = useCallback((field: 'reps' | 'weight') => {\n    setEditState({\n      isEditing: field,\n      reps,\n      weight\n    });\n  }, [reps, weight]);\n\n  const cancelEditing = useCallback(() => {\n    // Restore original values without saving\n    setEditState({\n      isEditing: null,\n      reps,\n      weight\n    });\n  }, [reps, weight]);\n\n  const finishEditing = useCallback(() => {\n    onChange({\n      reps: editState.reps,\n      weight: editState.weight\n    });\n    setEditState(prev => ({\n      ...prev,\n      isEditing: null\n    }));\n  }, [editState.reps, editState.weight, onChange]);\n\n  const updateEditValue = useCallback((field: 'reps' | 'weight', value: number) => {\n    setEditState(prev => ({\n      ...prev,\n      [field]: Math.max(0, value)\n    }));\n  }, []);\n\n  const incrementValue = useCallback((field: 'reps' | 'weight') => {\n    const increment = field === 'weight' ? 2.5 : 1;\n    updateEditValue(field, editState[field] + increment);\n  }, [editState, updateEditValue]);\n\n  const decrementValue = useCallback((field: 'reps' | 'weight') => {\n    const decrement = field === 'weight' ? 2.5 : 1;\n    updateEditValue(field, editState[field] - decrement);\n  }, [editState, updateEditValue]);\n\n  const handleRemoveClick = useCallback(() => {\n    if (confirm(`Remove Set ${index}?`)) {\n      onRemove();\n    }\n  }, [index, onRemove]);\n\n  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLInputElement>, field: 'reps' | 'weight') => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      finishEditing();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      cancelEditing();\n    }\n  }, [finishEditing, cancelEditing]);\n\n  // Auto-focus and scroll into view when entering edit mode\n  useEffect(() => {\n    if (editState.isEditing === 'reps' && repsInputRef.current) {\n      repsInputRef.current.focus();\n      // Smooth scroll to keep the row visible above keyboard within the constrained container\n      setTimeout(() => {\n        rowRef.current?.scrollIntoView({\n          behavior: 'smooth',\n          block: 'nearest', // More conservative - scrolls within container only if needed\n          inline: 'nearest'\n        });\n      }, 100);\n    } else if (editState.isEditing === 'weight' && weightInputRef.current) {\n      weightInputRef.current.focus();\n      // Smooth scroll to keep the row visible above keyboard within the constrained container\n      setTimeout(() => {\n        rowRef.current?.scrollIntoView({\n          behavior: 'smooth',\n          block: 'nearest', // More conservative - scrolls within container only if needed\n          inline: 'nearest'\n        });\n      }, 100);\n    }\n  }, [editState.isEditing]);\n\n  const currentReps = editState.isEditing === 'reps' ? editState.reps : reps;\n  const currentWeight = editState.isEditing === 'weight' ? editState.weight : weight;\n\n  return (\n    <div \n      ref={rowRef}\n      className=\"bg-white/10 backdrop-blur-md border border-white/20 rounded-xl p-4 scroll-margin-top\"\n    >\n      {/* Top Row - Always horizontal: Completion Toggle, Set Index, Actions Menu */}\n      <div className=\"flex items-center justify-between mb-3\">\n        {/* Completion Toggle - Larger for mobile */}\n        <Button\n          size=\"default\"\n          variant=\"ghost\"\n          onClick={onToggleComplete}\n          className=\"shrink-0 text-white hover:bg-white/10 min-h-10 min-w-10 p-0\"\n          aria-label={`${completed ? 'Mark incomplete' : 'Mark complete'} set ${index}`}\n          data-testid={`button-toggle-complete-${index}`}\n        >\n          {completed ? (\n            <CheckCircle className=\"w-7 h-7 text-green-400\" />\n          ) : (\n            <Circle className=\"w-7 h-7\" />\n          )}\n        </Button>\n\n        {/* Set Index */}\n        <div className=\"text-xl font-semibold text-white\" data-testid={`text-set-index-${index}`}>\n          Set {index}\n        </div>\n\n        {/* Actions Menu - Larger for mobile */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              size=\"default\"\n              variant=\"ghost\"\n              className=\"shrink-0 text-white hover:bg-white/10 min-h-10 min-w-10 p-0\"\n              aria-label={`More actions for set ${index}`}\n              data-testid={`button-more-actions-${index}`}\n            >\n              <MoreHorizontal className=\"w-5 h-5\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"bg-white/10 backdrop-blur-md border-white/20\">\n            <DropdownMenuItem\n              onClick={handleRemoveClick}\n              className=\"text-red-400 hover:bg-red-500/20 focus:bg-red-500/20\"\n              data-testid={`button-remove-set-${index}`}\n            >\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              Remove Set\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n\n      {/* Main Content - Mobile-friendly stacked layout */}\n      <div className=\"space-y-4\">\n        {/* Reps Display/Edit */}\n        <div className=\"space-y-2\">\n          <div className=\"text-sm font-medium text-white/80 text-center\">\n            {unit === 'reps' ? (perSide ? 'Reps per side' : 'Reps') : unit === 'seconds' ? 'Duration' : 'Steps'}\n          </div>\n          {editState.isEditing === 'reps' ? (\n            <div className=\"flex items-center gap-3\">\n              <Button\n                size=\"default\"\n                variant=\"outline\"\n                onClick={() => decrementValue('reps')}\n                className=\"text-white border-white/20 hover:bg-white/10 shrink-0 min-h-12 min-w-12 p-0\"\n                data-testid={`button-decrement-${unit}-${index}`}\n              >\n                <Minus className=\"w-5 h-5\" />\n              </Button>\n              \n              <Input\n                ref={repsInputRef}\n                type=\"number\"\n                inputMode=\"numeric\"\n                value={currentReps}\n                onChange={(e) => updateEditValue('reps', parseInt(e.target.value) || 0)}\n                onBlur={finishEditing}\n                onKeyDown={(e) => handleKeyDown(e, 'reps')}\n                className=\"text-center text-2xl font-bold bg-white/10 border-white/20 text-white min-h-14 rounded-xl [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                data-testid={`input-${unit}-${index}`}\n              />\n              \n              <Button\n                size=\"default\"\n                variant=\"outline\"\n                onClick={() => incrementValue('reps')}\n                className=\"text-white border-white/20 hover:bg-white/10 shrink-0 min-h-12 min-w-12 p-0\"\n                data-testid={`button-increment-${unit}-${index}`}\n              >\n                <Plus className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          ) : (\n            <button\n              onClick={() => startEditing('reps')}\n              className=\"text-2xl font-bold text-white hover:text-blue-300 transition-colors w-full text-center min-h-14 flex items-center justify-center bg-white/5 hover:bg-white/10 rounded-xl border border-white/10\"\n              aria-label={`Edit ${unit === 'reps' ? 'reps' : unit === 'seconds' ? 'seconds' : 'steps'} for set ${index}, currently ${currentReps}`}\n              data-testid={`button-edit-${unit}-${index}`}\n            >\n              {currentReps} {unit === 'seconds' ? 's' : ''}\n            </button>\n          )}\n        </div>\n\n        {/* Weight Display/Edit */}\n        <div className=\"space-y-2\">\n          <div className=\"text-sm font-medium text-white/80 text-center\">\n            Weight\n          </div>\n          {editState.isEditing === 'weight' ? (\n            <div className=\"flex items-center gap-3\">\n              <Button\n                size=\"default\"\n                variant=\"outline\"\n                onClick={() => decrementValue('weight')}\n                className=\"text-white border-white/20 hover:bg-white/10 shrink-0 min-h-12 min-w-12 p-0\"\n                data-testid={`button-decrement-weight-${index}`}\n              >\n                <Minus className=\"w-5 h-5\" />\n              </Button>\n              \n              <Input\n                ref={weightInputRef}\n                type=\"number\"\n                inputMode=\"decimal\"\n                step=\"0.5\"\n                value={currentWeight}\n                onChange={(e) => updateEditValue('weight', parseFloat(e.target.value) || 0)}\n                onBlur={finishEditing}\n                onKeyDown={(e) => handleKeyDown(e, 'weight')}\n                className=\"text-center text-2xl font-bold bg-white/10 border-white/20 text-white min-h-14 rounded-xl\"\n                data-testid={`input-weight-${index}`}\n              />\n              \n              <Button\n                size=\"default\"\n                variant=\"outline\"\n                onClick={() => incrementValue('weight')}\n                className=\"text-white border-white/20 hover:bg-white/10 shrink-0 min-h-12 min-w-12 p-0\"\n                data-testid={`button-increment-weight-${index}`}\n              >\n                <Plus className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          ) : (\n            <button\n              onClick={() => startEditing('weight')}\n              className=\"text-2xl font-bold text-white hover:text-blue-300 transition-colors w-full text-center min-h-14 flex items-center justify-center bg-white/5 hover:bg-white/10 rounded-xl border border-white/10\"\n              aria-label={`Edit weight for set ${index}, currently ${currentWeight} kg`}\n              data-testid={`button-edit-weight-${index}`}\n            >\n              {currentWeight} kg\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nSetRow.displayName = 'SetRow';","size_bytes":11074},"client/src/pages/Calendar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { SessionTemplate, SessionInstance, ScheduledSession } from \"@shared/schema\";\nimport { \n  loadSessionTemplates, \n  loadSessionInstances,\n  getSessionInstancesForDate,\n  loadScheduledSessions, \n  getScheduledSessionsForDate,\n  formatDate,\n  getTodayString,\n  addDays,\n  createSessionInstanceFromTemplate,\n  migrateLegacyScheduledSessions\n} from \"@/utils/sessionStorage\";\nimport { calculateSessionProgress } from \"@/utils/workoutHelpers\";\nimport Layout from \"@/components/Layout\";\nimport GlassCard from \"@/components/GlassCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar as CalendarIcon, Plus, Play, Clock, CheckCircle, Dumbbell } from \"lucide-react\";\n\ninterface CalendarDay {\n  date: string;\n  isToday: boolean;\n  isCurrentMonth: boolean;\n  sessions: (SessionInstance | ScheduledSession)[];\n}\n\ninterface CombinedSession {\n  id: string;\n  templateId: string;\n  date: string;\n  startTime?: string;\n  status: 'scheduled' | 'in_progress' | 'completed' | 'skipped';\n  completedAt?: string;\n  notes?: string;\n  name?: string;\n  exercises?: any[];\n  estimatedDurationMinutes?: number;\n}\n\nexport default function Calendar() {\n  const [, navigate] = useLocation();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<string>(getTodayString());\n  const [calendarDays, setCalendarDays] = useState<CalendarDay[]>([]);\n  const [sessionTemplates, setSessionTemplates] = useState<SessionTemplate[]>([]);\n  const [sessionInstances, setSessionInstances] = useState<SessionInstance[]>([]);\n  const [scheduledSessions, setScheduledSessions] = useState<ScheduledSession[]>([]);\n  const [selectedDateSessions, setSelectedDateSessions] = useState<CombinedSession[]>([]);\n  const [isScheduleDialogOpen, setIsScheduleDialogOpen] = useState(false);\n  const [selectedTemplateId, setSelectedTemplateId] = useState<string>(\"\");\n  const [selectedStartTime, setSelectedStartTime] = useState<string>(\"\");\n\n  useEffect(() => {\n    // Migrate legacy data first\n    migrateLegacyScheduledSessions();\n    \n    // Load data\n    loadData();\n  }, []);\n\n  const loadData = () => {\n    setSessionTemplates(loadSessionTemplates());\n    setSessionInstances(loadSessionInstances());\n    setScheduledSessions(loadScheduledSessions());\n  };\n\n  useEffect(() => {\n    // Generate calendar days for current month\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const startDate = new Date(firstDay);\n    startDate.setDate(firstDay.getDate() - firstDay.getDay()); // Start from Sunday\n\n    const days: CalendarDay[] = [];\n    const today = getTodayString();\n\n    for (let i = 0; i < 42; i++) { // 6 weeks\n      const date = new Date(startDate);\n      date.setDate(startDate.getDate() + i);\n      const dateString = formatDate(date);\n      \n      // Combine both SessionInstance and legacy ScheduledSession\n      const instances = getSessionInstancesForDate(dateString);\n      const legacySessions = getScheduledSessionsForDate(dateString);\n      const combinedSessions = [...instances, ...legacySessions];\n      \n      days.push({\n        date: dateString,\n        isToday: dateString === today,\n        isCurrentMonth: date.getMonth() === month,\n        sessions: combinedSessions\n      });\n    }\n\n    setCalendarDays(days);\n  }, [currentDate, sessionInstances, scheduledSessions]);\n\n  useEffect(() => {\n    // Update selected date sessions - combine SessionInstance and ScheduledSession\n    const instances = getSessionInstancesForDate(selectedDate);\n    const legacySessions = getScheduledSessionsForDate(selectedDate);\n    \n    const combinedSessions: CombinedSession[] = [\n      ...instances.map(instance => ({\n        id: instance.id,\n        templateId: instance.templateId,\n        date: instance.date,\n        startTime: instance.startTime,\n        status: instance.status,\n        completedAt: instance.completedAt,\n        notes: instance.notes,\n        name: instance.templateSnapshot.name,\n        exercises: instance.templateSnapshot.exercises,\n        estimatedDurationMinutes: instance.templateSnapshot.estimatedDurationMinutes\n      })),\n      ...legacySessions.map(session => {\n        const template = getSessionTemplate(session.templateId);\n        return {\n          id: session.id,\n          templateId: session.templateId,\n          date: session.date,\n          startTime: session.startTime,\n          status: session.status,\n          completedAt: session.completedAt,\n          notes: session.notes,\n          name: template?.name,\n          exercises: template?.exercises,\n          estimatedDurationMinutes: template?.estimatedDurationMinutes\n        };\n      })\n    ];\n    \n    setSelectedDateSessions(combinedSessions);\n  }, [selectedDate, sessionInstances, scheduledSessions, sessionTemplates]);\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      newDate.setMonth(prev.getMonth() + (direction === 'next' ? 1 : -1));\n      return newDate;\n    });\n  };\n\n  const getSessionTemplate = (templateId: string): SessionTemplate | null => {\n    return sessionTemplates.find(t => t.id === templateId) || null;\n  };\n\n  const handleScheduleSession = () => {\n    if (!selectedTemplateId) return;\n    \n    const template = sessionTemplates.find(t => t.id === selectedTemplateId);\n    if (!template) return;\n    \n    try {\n      const startTime = selectedStartTime === \"anytime\" || selectedStartTime === \"\" ? undefined : selectedStartTime;\n      createSessionInstanceFromTemplate(template, selectedDate, startTime);\n      loadData(); // Refresh data\n      setIsScheduleDialogOpen(false);\n      setSelectedTemplateId(\"\");\n      setSelectedStartTime(\"\");\n      console.log(`Session \"${template.name}\" scheduled for ${selectedDate}`);\n    } catch (error) {\n      console.error('Failed to schedule session:', error);\n    }\n  };\n\n  const handleStartSession = (sessionId: string) => {\n    navigate(`/workout/${sessionId}`);\n  };\n\n  const generateTimeSlots = () => {\n    const slots = [];\n    for (let hour = 6; hour < 22; hour++) {\n      for (let minute = 0; minute < 60; minute += 30) {\n        const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n        const displayTime = new Date(`2000-01-01T${timeString}:00`).toLocaleTimeString([], { \n          hour: 'numeric', \n          minute: '2-digit',\n          hour12: true \n        });\n        slots.push({ value: timeString, label: displayTime });\n      }\n    }\n    return slots;\n  };\n\n  const getSessionStatusIcon = (session: ScheduledSession) => {\n    switch (session.status) {\n      case 'completed':\n        return <CheckCircle className=\"w-3 h-3 text-green-400\" />;\n      case 'in_progress':\n        return <Play className=\"w-3 h-3 text-blue-400\" />;\n      case 'skipped':\n        return <Clock className=\"w-3 h-3 text-gray-400\" />;\n      default:\n        return <CalendarIcon className=\"w-3 h-3 text-white/60\" />;\n    }\n  };\n\n  const formatSelectedDate = (dateString: string): string => {\n    const date = new Date(dateString + 'T00:00:00');\n    return date.toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const isDateToday = (dateString: string): boolean => {\n    return dateString === getTodayString();\n  };\n\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        {/* Calendar Header */}\n        <GlassCard variant=\"secondary\">\n          <div className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h1 className=\"text-xl font-bold text-white\" data-testid=\"calendar-title\">\n                {currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n              </h1>\n              <div className=\"flex gap-2\">\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={() => navigateMonth('prev')}\n                  className=\"text-white hover:text-white\"\n                  data-testid=\"button-prev-month\"\n                >\n                  <CalendarIcon className=\"w-4 h-4 rotate-180\" />\n                </Button>\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={() => navigateMonth('next')}\n                  className=\"text-white hover:text-white\"\n                  data-testid=\"button-next-month\"\n                >\n                  <CalendarIcon className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Calendar Grid */}\n            <div className=\"grid grid-cols-7 gap-1 mb-2\">\n              {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                <div key={day} className=\"p-2 text-center text-xs font-medium text-white/60\">\n                  {day}\n                </div>\n              ))}\n            </div>\n\n            <div className=\"grid grid-cols-7 gap-1\">\n              {calendarDays.map((day, index) => (\n                <button\n                  key={index}\n                  onClick={() => setSelectedDate(day.date)}\n                  className={`\n                    relative p-2 min-h-[40px] text-sm rounded-lg transition-all\n                    ${day.isCurrentMonth ? 'text-white' : 'text-white/30'}\n                    ${day.isToday ? 'bg-blue-600/50 ring-2 ring-blue-400' : ''}\n                    ${selectedDate === day.date ? 'bg-white/20' : 'hover:bg-white/10'}\n                  `}\n                  data-testid={`calendar-day-${day.date}`}\n                >\n                  <div className=\"text-center\">\n                    {new Date(day.date + 'T00:00:00').getDate()}\n                  </div>\n                  {day.sessions.length > 0 && (\n                    <div className=\"absolute bottom-1 left-1/2 transform -translate-x-1/2\">\n                      <div className=\"flex gap-0.5\">\n                        {day.sessions.slice(0, 3).map((session, i) => (\n                          <div\n                            key={i}\n                            className={`w-1.5 h-1.5 rounded-full ${\n                              session.status === 'completed' ? 'bg-green-400' :\n                              session.status === 'in_progress' ? 'bg-blue-400' :\n                              session.status === 'skipped' ? 'bg-gray-400' :\n                              'bg-white/60'\n                            }`}\n                          />\n                        ))}\n                        {day.sessions.length > 3 && (\n                          <div className=\"w-1.5 h-1.5 rounded-full bg-white/40\" />\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </button>\n              ))}\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Selected Date Details */}\n        <GlassCard variant=\"tertiary\">\n          <div className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h2 className=\"text-lg font-semibold text-white\" data-testid=\"selected-date-title\">\n                  {formatSelectedDate(selectedDate)}\n                </h2>\n                {isDateToday(selectedDate) && (\n                  <p className=\"text-sm text-blue-300\">Today</p>\n                )}\n              </div>\n              <Dialog open={isScheduleDialogOpen} onOpenChange={setIsScheduleDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"text-white border-white/20 hover:bg-white/10\"\n                    data-testid=\"button-add-session\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Add Session\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"bg-gray-900/95 border-white/20 text-white\">\n                  <DialogHeader>\n                    <DialogTitle className=\"text-white\">Schedule Session for {formatSelectedDate(selectedDate)}</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4 pt-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-white/80 mb-2 block\">Select Template</label>\n                      <Select value={selectedTemplateId} onValueChange={setSelectedTemplateId}>\n                        <SelectTrigger className=\"bg-white/10 border-white/20 text-white\">\n                          <SelectValue placeholder=\"Choose a workout template...\" />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-gray-900 border-white/20\">\n                          {sessionTemplates.map((template) => (\n                            <SelectItem key={template.id} value={template.id} className=\"text-white hover:bg-white/10\">\n                              <div className=\"flex items-center gap-2\">\n                                <Dumbbell className=\"w-4 h-4\" />\n                                <div>\n                                  <div className=\"font-medium\">{template.name}</div>\n                                  <div className=\"text-xs text-white/60\">\n                                    {template.exercises.length} exercises • {template.estimatedDurationMinutes || 'Unknown'}min\n                                  </div>\n                                </div>\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <label className=\"text-sm font-medium text-white/80 mb-2 block\">Start Time (Optional)</label>\n                      <Select value={selectedStartTime} onValueChange={setSelectedStartTime}>\n                        <SelectTrigger className=\"bg-white/10 border-white/20 text-white\">\n                          <SelectValue placeholder=\"Any time\" />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-gray-900 border-white/20 max-h-60\">\n                          <SelectItem value=\"anytime\" className=\"text-white hover:bg-white/10\">Any time</SelectItem>\n                          {generateTimeSlots().map((slot) => (\n                            <SelectItem key={slot.value} value={slot.value} className=\"text-white hover:bg-white/10\">\n                              {slot.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div className=\"flex gap-2 pt-4\">\n                      <Button\n                        variant=\"outline\"\n                        className=\"flex-1 text-white border-white/20 hover:bg-white/10\"\n                        onClick={() => setIsScheduleDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        className=\"flex-1\"\n                        onClick={handleScheduleSession}\n                        disabled={!selectedTemplateId}\n                        data-testid=\"button-confirm-schedule\"\n                      >\n                        Schedule Session\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Sessions for Selected Date */}\n            {selectedDateSessions.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <CalendarIcon className=\"w-12 h-12 text-white/30 mx-auto mb-3\" />\n                <p className=\"text-white/60 mb-4\">No sessions scheduled for this day</p>\n                <Dialog open={isScheduleDialogOpen} onOpenChange={setIsScheduleDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className=\"text-white border-white/20 hover:bg-white/10\"\n                      data-testid=\"button-schedule-first-session\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Schedule Your First Session\n                    </Button>\n                  </DialogTrigger>\n                </Dialog>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {selectedDateSessions.map((session) => {\n                  const template = getSessionTemplate(session.templateId);\n                  return (\n                    <div\n                      key={session.id}\n                      className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg border border-white/10\"\n                      data-testid={`session-${session.id}`}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        {getSessionStatusIcon(session)}\n                        <div>\n                          <h3 className=\"font-medium text-white\">\n                            {session.name || 'Unknown Session'}\n                          </h3>\n                          <div className=\"flex items-center gap-4 text-sm text-white/60\">\n                            {session.startTime && (\n                              <span>\n                                {new Date(`2000-01-01T${session.startTime}:00`).toLocaleTimeString([], { \n                                  hour: 'numeric', \n                                  minute: '2-digit',\n                                  hour12: true \n                                })}\n                              </span>\n                            )}\n                            {session.exercises && (\n                              <span>{session.exercises.length} exercises</span>\n                            )}\n                            {session.estimatedDurationMinutes && (\n                              <span>{session.estimatedDurationMinutes}min</span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-2\">\n                        {session.status === 'scheduled' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"default\"\n                            onClick={() => handleStartSession(session.id)}\n                            data-testid={`button-start-session-${session.id}`}\n                          >\n                            <Play className=\"w-3 h-3 mr-1\" />\n                            Start\n                          </Button>\n                        )}\n                        {session.status === 'in_progress' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"default\"\n                            onClick={() => handleStartSession(session.id)}\n                            data-testid={`button-continue-session-${session.id}`}\n                          >\n                            Continue\n                          </Button>\n                        )}\n                        {session.status === 'completed' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"text-white/60\"\n                            data-testid={`button-view-session-${session.id}`}\n                          >\n                            View\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </GlassCard>\n\n        {/* Quick Stats */}\n        {isDateToday(selectedDate) && selectedDateSessions.length > 0 && (\n          <GlassCard variant=\"tertiary\">\n            <div className=\"p-4\">\n              <h3 className=\"text-sm font-medium text-white/80 mb-3\">Today's Progress</h3>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-white\">\n                    {selectedDateSessions.filter(s => s.status === 'completed').length}\n                  </div>\n                  <div className=\"text-xs text-white/60\">Completed</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-white\">\n                    {selectedDateSessions.filter(s => s.status === 'in_progress').length}\n                  </div>\n                  <div className=\"text-xs text-white/60\">In Progress</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-white\">\n                    {selectedDateSessions.filter(s => s.status === 'scheduled').length}\n                  </div>\n                  <div className=\"text-xs text-white/60\">Scheduled</div>\n                </div>\n              </div>\n            </div>\n          </GlassCard>\n        )}\n      </div>\n    </Layout>\n  );\n}","size_bytes":21762},"client/src/pages/Sessions.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { SessionTemplate } from \"@shared/schema\";\nimport { \n  loadSessionTemplates, \n  saveSessionTemplate, \n  deleteSessionTemplate,\n  convertCSVDataToTemplates,\n  createSessionInstanceFromTemplate,\n  getTodayString\n} from \"@/utils/sessionStorage\";\nimport { loadWorkoutData } from \"@/utils/storage\";\nimport { estimateSessionDuration, generateUniqueId } from \"@/utils/workoutHelpers\";\nimport { parseTrainingCSV } from \"@/utils/trainingCsvParser\";\nimport Layout from \"@/components/Layout\";\nimport GlassCard from \"@/components/GlassCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Plus, \n  LibraryBig, \n  Play, \n  Edit, \n  Trash2, \n  Clock, \n  Target,\n  Upload,\n  Copy,\n  Calendar\n} from \"lucide-react\";\n\nexport default function Sessions() {\n  const [, navigate] = useLocation();\n  const [sessionTemplates, setSessionTemplates] = useState<SessionTemplate[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [allTags, setAllTags] = useState<string[]>([]);\n  const [showUseDialog, setShowUseDialog] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState<SessionTemplate | null>(null);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [editingTemplate, setEditingTemplate] = useState<SessionTemplate | null>(null);\n  const [editForm, setEditForm] = useState({\n    name: '',\n    description: '',\n    tags: [] as string[],\n    newTag: ''\n  });\n  const trainingFileInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = () => {\n    const templates = loadSessionTemplates();\n    setSessionTemplates(templates);\n    \n    // Extract all unique tags\n    const tags = new Set<string>();\n    templates.forEach(template => {\n      template.tags.forEach(tag => tags.add(tag));\n    });\n    setAllTags(Array.from(tags));\n  };\n\n  const handleCreateTemplate = () => {\n    // Create a new empty template\n    const newTemplate: SessionTemplate = {\n      id: generateUniqueId(),\n      name: \"New Session\",\n      description: \"\",\n      exercises: [],\n      estimatedDurationMinutes: 0,\n      tags: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    saveSessionTemplate(newTemplate);\n    loadData();\n    console.log('New session template created:', newTemplate.name);\n  };\n\n  const handleDuplicateTemplate = (template: SessionTemplate) => {\n    const duplicatedTemplate: SessionTemplate = {\n      ...template,\n      id: generateUniqueId(),\n      name: `${template.name} (Copy)`,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    saveSessionTemplate(duplicatedTemplate);\n    loadData();\n    console.log('Session template duplicated:', duplicatedTemplate.name);\n  };\n\n  const handleDeleteTemplate = (templateId: string) => {\n    if (confirm('Are you sure you want to delete this session template?')) {\n      deleteSessionTemplate(templateId);\n      loadData();\n      console.log('Session template deleted:', templateId);\n    }\n  };\n\n  const handleImportFromCSV = () => {\n    // Check if there's existing CSV data to convert\n    const csvData = loadWorkoutData();\n    if (csvData && csvData.data.length > 0) {\n      const convertedTemplates = convertCSVDataToTemplates(csvData.data);\n      \n      // Save each template\n      convertedTemplates.forEach(template => {\n        saveSessionTemplate(template);\n      });\n      \n      loadData();\n      console.log(`Imported ${convertedTemplates.length} session templates from CSV data`);\n    } else {\n      console.log('No CSV data found to import');\n    }\n  };\n\n  const handleImportTrainingCSV = () => {\n    if (trainingFileInputRef.current) {\n      trainingFileInputRef.current.click();\n    }\n  };\n\n  const handleTrainingFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    try {\n      const content = await file.text();\n      const result = parseTrainingCSV(content);\n      \n      if (result.errors.length > 0) {\n        console.error('CSV parsing errors:', result.errors);\n        alert(`Import failed with errors:\\n${result.errors.join('\\n')}`);\n        return;\n      }\n\n      // Save each session template\n      result.sessions.forEach(template => {\n        saveSessionTemplate(template);\n      });\n\n      loadData();\n      console.log(`Successfully imported ${result.sessions.length} training sessions from CSV`);\n      alert(`Successfully imported ${result.sessions.length} training sessions!`);\n      \n    } catch (error) {\n      console.error('Failed to import training CSV:', error);\n      alert(`Failed to import training CSV: ${error}`);\n    }\n\n    // Reset file input\n    if (trainingFileInputRef.current) {\n      trainingFileInputRef.current.value = '';\n    }\n  };\n\n  const handleUseTemplate = (template: SessionTemplate) => {\n    setSelectedTemplate(template);\n    setShowUseDialog(true);\n  };\n\n  const handleUseNow = () => {\n    if (!selectedTemplate) return;\n    \n    try {\n      // Create a session instance for today\n      const instance = createSessionInstanceFromTemplate(selectedTemplate, getTodayString());\n      \n      // Navigate to workout mode with the new instance\n      navigate(`/workout/${instance.id}`);\n      console.log(`Started workout from template: ${selectedTemplate.name}`);\n    } catch (error) {\n      console.error('Failed to start workout:', error);\n    }\n  };\n\n  const handleScheduleForLater = () => {\n    // Navigate to calendar with template context (we'll implement this later)\n    navigate('/');\n    setShowUseDialog(false);\n    console.log('Navigate to calendar to schedule session');\n  };\n\n  const handleEditTemplate = (template: SessionTemplate) => {\n    setEditingTemplate(template);\n    setEditForm({\n      name: template.name,\n      description: template.description || '',\n      tags: [...template.tags],\n      newTag: ''\n    });\n    setShowEditDialog(true);\n  };\n\n  const handleSaveEdit = () => {\n    if (!editingTemplate) return;\n    \n    const updatedTemplate: SessionTemplate = {\n      ...editingTemplate,\n      name: editForm.name.trim(),\n      description: editForm.description.trim() || undefined,\n      tags: editForm.tags,\n      updatedAt: new Date().toISOString()\n    };\n    \n    saveSessionTemplate(updatedTemplate);\n    loadData();\n    setShowEditDialog(false);\n    setEditingTemplate(null);\n    console.log('Session template updated:', updatedTemplate.name);\n  };\n\n  const handleAddTag = () => {\n    const newTag = editForm.newTag.trim();\n    if (newTag && !editForm.tags.includes(newTag)) {\n      setEditForm(prev => ({\n        ...prev,\n        tags: [...prev.tags, newTag],\n        newTag: ''\n      }));\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    setEditForm(prev => ({\n      ...prev,\n      tags: prev.tags.filter(tag => tag !== tagToRemove)\n    }));\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleAddTag();\n    }\n  };\n\n  const filteredTemplates = sessionTemplates.filter(template => {\n    const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (template.description && template.description.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesTags = selectedTags.length === 0 || \n                       selectedTags.some(tag => template.tags.includes(tag));\n    \n    return matchesSearch && matchesTags;\n  });\n\n  const toggleTagFilter = (tag: string) => {\n    setSelectedTags(prev => \n      prev.includes(tag) \n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n  };\n\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        {/* Page Header */}\n        <GlassCard variant=\"secondary\">\n          <div className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h1 className=\"text-xl font-bold text-white\" data-testid=\"sessions-title\">\n                  Session Templates\n                </h1>\n                <p className=\"text-sm text-white/60\">\n                  Create and manage your workout session templates\n                </p>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={handleImportTrainingCSV}\n                  className=\"text-white border-white/20 hover:bg-white/10\"\n                  data-testid=\"button-import-training-csv\"\n                >\n                  <Upload className=\"w-4 h-4 mr-1\" />\n                  Import Training CSV\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={handleImportFromCSV}\n                  className=\"text-white border-white/20 hover:bg-white/10\"\n                  data-testid=\"button-import-csv\"\n                >\n                  <Upload className=\"w-4 h-4 mr-1\" />\n                  Import Legacy CSV\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"default\"\n                  onClick={handleCreateTemplate}\n                  data-testid=\"button-create-template\"\n                >\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  New Template\n                </Button>\n              </div>\n            </div>\n\n            {/* Search and Filters */}\n            <div className=\"space-y-3\">\n              <input\n                type=\"text\"\n                placeholder=\"Search session templates...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-blue-400\"\n                data-testid=\"input-search-templates\"\n              />\n              \n              {allTags.length > 0 && (\n                <div className=\"flex flex-wrap gap-2\">\n                  <span className=\"text-sm text-white/60\">Filter by tags:</span>\n                  {allTags.map(tag => (\n                    <button\n                      key={tag}\n                      onClick={() => toggleTagFilter(tag)}\n                      className={`px-2 py-1 text-xs rounded-full border transition-colors ${\n                        selectedTags.includes(tag)\n                          ? 'bg-blue-600 border-blue-500 text-white'\n                          : 'bg-white/10 border-white/20 text-white/70 hover:bg-white/20'\n                      }`}\n                      data-testid={`tag-filter-${tag}`}\n                    >\n                      {tag}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Session Templates Grid */}\n        {filteredTemplates.length === 0 ? (\n          <GlassCard variant=\"tertiary\">\n            <div className=\"p-8 text-center\">\n              <LibraryBig className=\"w-16 h-16 text-white/30 mx-auto mb-4\" />\n              {sessionTemplates.length === 0 ? (\n                <>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">\n                    No Session Templates Yet\n                  </h3>\n                  <p className=\"text-white/60 mb-6 max-w-md mx-auto\">\n                    Create your first session template to get started, or import existing workout data from CSV.\n                  </p>\n                  <div className=\"flex justify-center gap-3\">\n                    <Button\n                      variant=\"default\"\n                      onClick={handleCreateTemplate}\n                      data-testid=\"button-create-first-template\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create First Template\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleImportFromCSV}\n                      className=\"text-white border-white/20 hover:bg-white/10\"\n                      data-testid=\"button-import-first-csv\"\n                    >\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Import from CSV\n                    </Button>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">\n                    No Templates Match Your Search\n                  </h3>\n                  <p className=\"text-white/60 mb-4\">\n                    Try adjusting your search terms or filters\n                  </p>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setSearchTerm(\"\");\n                      setSelectedTags([]);\n                    }}\n                    className=\"text-white border-white/20 hover:bg-white/10\"\n                    data-testid=\"button-clear-filters\"\n                  >\n                    Clear Filters\n                  </Button>\n                </>\n              )}\n            </div>\n          </GlassCard>\n        ) : (\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {filteredTemplates.map((template) => (\n              <GlassCard key={template.id} variant=\"tertiary\">\n                <div className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-semibold text-white truncate\" data-testid={`template-title-${template.id}`}>\n                        {template.name}\n                      </h3>\n                      {template.description && (\n                        <p className=\"text-sm text-white/60 mt-1 line-clamp-2\">\n                          {template.description}\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"flex gap-1 ml-2\">\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => handleDuplicateTemplate(template)}\n                        className=\"w-8 h-8 text-white/60 hover:text-white\"\n                        data-testid={`button-duplicate-${template.id}`}\n                      >\n                        <Copy className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => handleEditTemplate(template)}\n                        className=\"w-8 h-8 text-white/60 hover:text-white\"\n                        data-testid={`button-edit-${template.id}`}\n                      >\n                        <Edit className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => handleDeleteTemplate(template.id)}\n                        className=\"w-8 h-8 text-red-400 hover:text-red-300\"\n                        data-testid={`button-delete-${template.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex items-center gap-4 text-sm text-white/60\">\n                      <div className=\"flex items-center gap-1\">\n                        <Target className=\"w-3 h-3\" />\n                        <span>{template.exercises.length} exercises</span>\n                      </div>\n                      {template.estimatedDurationMinutes && (\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"w-3 h-3\" />\n                          <span>{template.estimatedDurationMinutes}min</span>\n                        </div>\n                      )}\n                    </div>\n\n                    {template.tags.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1\">\n                        {template.tags.map(tag => (\n                          <span\n                            key={tag}\n                            className=\"px-2 py-0.5 text-xs bg-white/10 text-white/70 rounded-full\"\n                          >\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"default\"\n                      className=\"flex-1\"\n                      onClick={() => handleUseTemplate(template)}\n                      data-testid={`button-use-${template.id}`}\n                    >\n                      <Play className=\"w-3 h-3 mr-1\" />\n                      Use Template\n                    </Button>\n                  </div>\n\n                  <div className=\"mt-3 pt-3 border-t border-white/10\">\n                    <div className=\"text-xs text-white/40\">\n                      Created {new Date(template.createdAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                </div>\n              </GlassCard>\n            ))}\n          </div>\n        )}\n\n        {/* Quick Stats */}\n        {sessionTemplates.length > 0 && (\n          <GlassCard variant=\"tertiary\">\n            <div className=\"p-4\">\n              <h3 className=\"text-sm font-medium text-white/80 mb-3\">Template Library Stats</h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-white\">\n                    {sessionTemplates.length}\n                  </div>\n                  <div className=\"text-xs text-white/60\">Total Templates</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-white\">\n                    {allTags.length}\n                  </div>\n                  <div className=\"text-xs text-white/60\">Categories</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-white\">\n                    {sessionTemplates.reduce((sum, t) => sum + t.exercises.length, 0)}\n                  </div>\n                  <div className=\"text-xs text-white/60\">Total Exercises</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-white\">\n                    {Math.round(sessionTemplates.reduce((sum, t) => sum + (t.estimatedDurationMinutes || 0), 0) / sessionTemplates.length) || 0}\n                  </div>\n                  <div className=\"text-xs text-white/60\">Avg Duration (min)</div>\n                </div>\n              </div>\n            </div>\n          </GlassCard>\n        )}\n\n        {/* Use Template Dialog */}\n        <Dialog open={showUseDialog} onOpenChange={setShowUseDialog}>\n          <DialogContent className=\"bg-gray-900/95 border-white/20 text-white\">\n            <DialogHeader>\n              <DialogTitle className=\"text-white\">Use Template: {selectedTemplate?.name}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 pt-4\">\n              {selectedTemplate && (\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-white/5 rounded-lg border border-white/10\">\n                    <div className=\"flex items-center gap-4 text-sm text-white/60 mb-2\">\n                      <div className=\"flex items-center gap-1\">\n                        <Target className=\"w-3 h-3\" />\n                        <span>{selectedTemplate.exercises.length} exercises</span>\n                      </div>\n                      {selectedTemplate.estimatedDurationMinutes && (\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"w-3 h-3\" />\n                          <span>{selectedTemplate.estimatedDurationMinutes}min</span>\n                        </div>\n                      )}\n                    </div>\n                    {selectedTemplate.description && (\n                      <p className=\"text-sm text-white/80\">{selectedTemplate.description}</p>\n                    )}\n                  </div>\n                  \n                  <p className=\"text-sm text-white/60\">\n                    Choose how you'd like to use this template:\n                  </p>\n                  \n                  <div className=\"grid gap-3\">\n                    <Button\n                      className=\"justify-start h-auto p-4\"\n                      onClick={handleUseNow}\n                      data-testid=\"button-use-now\"\n                    >\n                      <div className=\"flex items-center gap-3 w-full\">\n                        <Play className=\"w-5 h-5 flex-shrink-0\" />\n                        <div className=\"text-left\">\n                          <div className=\"font-medium\">Start Workout Now</div>\n                          <div className=\"text-xs text-white/60\">Begin immediately with this template</div>\n                        </div>\n                      </div>\n                    </Button>\n                    \n                    <Button\n                      variant=\"outline\"\n                      className=\"justify-start h-auto p-4 text-white border-white/20 hover:bg-white/10\"\n                      onClick={handleScheduleForLater}\n                      data-testid=\"button-schedule-later\"\n                    >\n                      <div className=\"flex items-center gap-3 w-full\">\n                        <Calendar className=\"w-5 h-5 flex-shrink-0\" />\n                        <div className=\"text-left\">\n                          <div className=\"font-medium\">Schedule for Later</div>\n                          <div className=\"text-xs text-white/60\">Add to your calendar for a specific date/time</div>\n                        </div>\n                      </div>\n                    </Button>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"flex justify-end pt-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"text-white border-white/20 hover:bg-white/10\"\n                  onClick={() => setShowUseDialog(false)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Template Dialog */}\n        <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n          <DialogContent className=\"bg-gray-900/95 border-white/20 text-white max-w-md\">\n            <DialogHeader>\n              <DialogTitle className=\"text-white\">Edit Template: {editingTemplate?.name}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 pt-4\">\n              {editingTemplate && (\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"template-name\" className=\"text-white/80\">\n                      Template Name\n                    </Label>\n                    <Input\n                      id=\"template-name\"\n                      type=\"text\"\n                      value={editForm.name}\n                      onChange={(e) => setEditForm(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Enter template name\"\n                      className=\"bg-white/10 border-white/20 text-white placeholder-white/50\"\n                      data-testid=\"input-edit-template-name\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"template-description\" className=\"text-white/80\">\n                      Description (optional)\n                    </Label>\n                    <Textarea\n                      id=\"template-description\"\n                      value={editForm.description}\n                      onChange={(e) => setEditForm(prev => ({ ...prev, description: e.target.value }))}\n                      placeholder=\"Enter template description\"\n                      className=\"bg-white/10 border-white/20 text-white placeholder-white/50\"\n                      rows={3}\n                      data-testid=\"textarea-edit-template-description\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label className=\"text-white/80\">Tags</Label>\n                    \n                    {/* Existing tags */}\n                    {editForm.tags.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1 mb-2\">\n                        {editForm.tags.map((tag, index) => (\n                          <span\n                            key={index}\n                            className=\"inline-flex items-center gap-1 px-2 py-1 text-xs bg-blue-600/20 border border-blue-500/30 text-blue-200 rounded-full\"\n                          >\n                            {tag}\n                            <button\n                              type=\"button\"\n                              onClick={() => handleRemoveTag(tag)}\n                              className=\"hover:text-red-300 transition-colors\"\n                              data-testid={`button-remove-tag-${index}`}\n                            >\n                              ×\n                            </button>\n                          </span>\n                        ))}\n                      </div>\n                    )}\n                    \n                    {/* Add new tag */}\n                    <div className=\"flex gap-2\">\n                      <Input\n                        type=\"text\"\n                        value={editForm.newTag}\n                        onChange={(e) => setEditForm(prev => ({ ...prev, newTag: e.target.value }))}\n                        onKeyPress={handleKeyPress}\n                        placeholder=\"Add a tag\"\n                        className=\"bg-white/10 border-white/20 text-white placeholder-white/50 flex-1\"\n                        data-testid=\"input-add-tag\"\n                      />\n                      <Button\n                        type=\"button\"\n                        size=\"sm\"\n                        onClick={handleAddTag}\n                        disabled={!editForm.newTag.trim() || editForm.tags.includes(editForm.newTag.trim())}\n                        className=\"px-3\"\n                        data-testid=\"button-add-tag\"\n                      >\n                        Add\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-3 bg-white/5 rounded-lg border border-white/10\">\n                    <div className=\"flex items-center gap-4 text-sm text-white/60\">\n                      <div className=\"flex items-center gap-1\">\n                        <Target className=\"w-3 h-3\" />\n                        <span>{editingTemplate.exercises.length} exercises</span>\n                      </div>\n                      {editingTemplate.estimatedDurationMinutes && (\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"w-3 h-3\" />\n                          <span>{editingTemplate.estimatedDurationMinutes}min</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"flex gap-3 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowEditDialog(false)}\n                  className=\"flex-1 text-white border-white/20 hover:bg-white/10\"\n                  data-testid=\"button-cancel-edit\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleSaveEdit}\n                  disabled={!editForm.name.trim()}\n                  className=\"flex-1\"\n                  data-testid=\"button-save-edit\"\n                >\n                  Save Changes\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Hidden file input for training CSV import */}\n        <input\n          ref={trainingFileInputRef}\n          type=\"file\"\n          accept=\".csv\"\n          onChange={handleTrainingFileSelect}\n          style={{ display: 'none' }}\n          data-testid=\"input-training-csv-file\"\n        />\n      </div>\n    </Layout>\n  );\n}","size_bytes":29372},"client/src/pages/WorkoutMode.tsx":{"content":"import { useState, useEffect, useRef, useCallback, useMemo } from \"react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { SessionExercise, WorkoutProgress, SetProgress, SessionInstance, ScheduledSession } from \"@shared/schema\";\nimport { \n  getSessionTemplate,\n  getScheduledSessionsForDate,\n  loadSessionInstances,\n  loadScheduledSessions,\n  saveSessionInstance,\n  saveScheduledSession,\n  saveWorkoutProgress,\n  getWorkoutProgress,\n  getExerciseProgress,\n  saveActiveWorkoutState,\n  loadActiveWorkoutState,\n  clearActiveWorkoutState,\n  ActiveWorkoutState\n} from \"@/utils/sessionStorage\";\nimport { \n  formatExercisePrescription, \n  formatWeight, \n  formatRestTime,\n  calculateCompletedSets,\n  getNextIncompleteSet,\n  createEmptySetProgress,\n  createEmptyWorkoutProgress\n} from \"@/utils/workoutHelpers\";\nimport GlassCard from \"@/components/GlassCard\";\nimport SetList from \"@/components/SetList\";\nimport { Button } from \"@/components/ui/button\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { \n  Play, \n  Pause, \n  Square, \n  SkipForward, \n  SkipBack, \n  Timer, \n  Clock,\n  CheckCircle,\n  Circle,\n  RotateCcw,\n  ChevronLeft,\n  ChevronRight,\n  ChevronDown,\n  Plus,\n  Minus\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface WorkoutModeProps {\n  sessionId: string;\n}\n\nexport default function WorkoutMode() {\n  const [match, params] = useRoute(\"/workout/:sessionId\");\n  const [, navigate] = useLocation();\n  const sessionId = params?.sessionId;\n  \n  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);\n  const [currentSetIndex, setCurrentSetIndex] = useState(0);\n  const [exercises, setExercises] = useState<SessionExercise[]>([]);\n  const [workoutProgress, setWorkoutProgress] = useState<WorkoutProgress[]>([]);\n  const [timerType, setTimerType] = useState<'rest' | 'stopwatch' | null>(null);\n  const [timerSeconds, setTimerSeconds] = useState(0);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [sessionStarted, setSessionStarted] = useState(false);\n  const [sessionInstance, setSessionInstance] = useState<SessionInstance | ScheduledSession | null>(null);\n  const [sessionNotFound, setSessionNotFound] = useState(false);\n  const [showFormGuidance, setShowFormGuidance] = useState(false);\n  const [showNotes, setShowNotes] = useState(false);\n  \n  // Handler for progress updates from SetList\n  const handleProgressUpdate = useCallback((updatedProgress: WorkoutProgress[]) => {\n    setWorkoutProgress(updatedProgress);\n  }, []);\n  \n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const startTimeRef = useRef<number | null>(null);\n\n  useEffect(() => {\n    if (!sessionId) return;\n\n    // Try to load active workout state first\n    const activeState = loadActiveWorkoutState();\n    if (activeState && activeState.sessionId === sessionId) {\n      // Resume existing workout\n      setCurrentExerciseIndex(activeState.currentExerciseIndex);\n      setCurrentSetIndex(activeState.currentSetIndex);\n      setSessionStarted(true);\n      \n      if (activeState.timerState) {\n        setTimerType(activeState.timerState.type);\n        setIsTimerRunning(activeState.timerState.isRunning);\n        if (activeState.timerState.isRunning) {\n          const elapsed = Date.now() - activeState.timerState.startTime;\n          if (activeState.timerState.type === 'rest' && activeState.timerState.duration) {\n            setTimerSeconds(Math.max(0, activeState.timerState.duration - Math.floor(elapsed / 1000)));\n          } else {\n            setTimerSeconds(Math.floor(elapsed / 1000));\n          }\n        } else {\n          setTimerSeconds(activeState.timerState.duration || 0);\n        }\n      }\n    }\n\n    // Load session data - check both SessionInstance and legacy ScheduledSession\n    let foundSession: SessionInstance | ScheduledSession | null = null;\n    let sessionExercises: SessionExercise[] = [];\n    \n    // First, try to find in SessionInstances\n    const sessionInstances = loadSessionInstances();\n    const instance = sessionInstances.find(s => s.id === sessionId);\n    \n    if (instance) {\n      foundSession = instance;\n      sessionExercises = instance.templateSnapshot.exercises;\n    } else {\n      // Fall back to legacy ScheduledSessions\n      const scheduledSessions = loadScheduledSessions();\n      const legacySession = scheduledSessions.find(s => s.id === sessionId);\n      \n      if (legacySession) {\n        foundSession = legacySession;\n        const template = getSessionTemplate(legacySession.templateId);\n        if (template) {\n          sessionExercises = template.exercises;\n        }\n      }\n    }\n    \n    if (foundSession && sessionExercises.length > 0) {\n      setSessionInstance(foundSession);\n      setExercises(sessionExercises);\n      setWorkoutProgress(getWorkoutProgress(sessionId));\n      setSessionNotFound(false);\n      \n      // Update session status to in_progress when first loaded\n      if (foundSession.status === 'scheduled') {\n        updateSessionStatus('in_progress');\n      }\n    } else {\n      setSessionNotFound(true);\n      console.error('Session not found:', sessionId);\n    }\n  }, [sessionId]);\n\n  useEffect(() => {\n    // Update active workout state whenever key state changes\n    if (sessionStarted && sessionId) {\n      const activeState: ActiveWorkoutState = {\n        sessionId,\n        instanceId: sessionId, // Using sessionId as instanceId for now\n        currentExerciseIndex,\n        currentSetIndex,\n        startedAt: startTimeRef.current ? new Date(startTimeRef.current).toISOString() : new Date().toISOString(),\n        timerState: timerType ? {\n          type: timerType,\n          startTime: Date.now() - (timerSeconds * 1000),\n          duration: timerType === 'rest' ? getRestDuration() : undefined,\n          isRunning: isTimerRunning\n        } : undefined\n      };\n      saveActiveWorkoutState(activeState);\n    }\n  }, [sessionId, currentExerciseIndex, currentSetIndex, timerType, timerSeconds, isTimerRunning, sessionStarted]);\n\n  useEffect(() => {\n    if (isTimerRunning && timerRef.current === null) {\n      timerRef.current = setInterval(() => {\n        setTimerSeconds(prev => {\n          if (timerType === 'rest' && prev <= 1) {\n            // Rest timer finished\n            setIsTimerRunning(false);\n            setTimerType(null);\n            return 0;\n          }\n          return timerType === 'rest' ? prev - 1 : prev + 1;\n        });\n      }, 1000);\n    } else if (!isTimerRunning && timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    };\n  }, [isTimerRunning, timerType]);\n\n  const currentExercise = exercises[currentExerciseIndex];\n\n  // Current exercise progress for display\n  const currentExerciseProgress = useMemo(() => {\n    return currentExercise ? getExerciseProgress(sessionId!, currentExercise.id) : null;\n  }, [workoutProgress, currentExercise, sessionId]);\n\n  const startWorkout = () => {\n    setSessionStarted(true);\n    startTimeRef.current = Date.now();\n    console.log('Workout started');\n  };\n\n  // Helper function for session status updates (defined below)\n\n  const completeSet = () => {\n    if (!currentExercise || !sessionId) return;\n\n    let progress = currentExerciseProgress || createEmptyWorkoutProgress(sessionId, currentExercise.id);\n    \n    // Ensure we have enough set progress entries\n    while (progress.sets.length <= currentSetIndex) {\n      progress.sets.push(createEmptySetProgress(progress.sets.length + 1));\n    }\n\n    // Mark current set as completed - values are managed by SetList\n    const currentSetProgress = progress.sets[currentSetIndex];\n    progress.sets[currentSetIndex] = {\n      ...currentSetProgress,\n      completed: true,\n      completedAt: new Date().toISOString(),\n      restTimerUsed: timerType === 'rest'\n    };\n\n    saveWorkoutProgress(progress);\n    setWorkoutProgress(prev => {\n      const updated = prev.filter(p => p.exerciseId !== currentExercise.id);\n      updated.push(progress);\n      return updated;\n    });\n\n    // Move to next set or exercise\n    if (currentSetIndex < currentExercise.sets - 1) {\n      setCurrentSetIndex(prev => prev + 1);\n    } else {\n      nextExercise();\n    }\n\n    console.log(`Set ${currentSetIndex + 1} completed for ${currentExercise.name}`, progress.sets[currentSetIndex]);\n  };\n\n  const nextExercise = () => {\n    if (currentExerciseIndex < exercises.length - 1) {\n      setCurrentExerciseIndex(prev => prev + 1);\n      setCurrentSetIndex(0);\n      stopTimer();\n    } else {\n      // Workout complete\n      finishWorkout();\n    }\n  };\n\n  const previousExercise = () => {\n    if (currentExerciseIndex > 0) {\n      setCurrentExerciseIndex(prev => prev - 1);\n      setCurrentSetIndex(0);\n      stopTimer();\n    }\n  };\n\n  const handleAddSet = useCallback(() => {\n    if (!currentExercise || !sessionId || !currentExerciseProgress) return;\n    \n    // Don't allow more than 12 sets\n    if (currentExerciseProgress.sets.length >= 12) return;\n    \n    let updatedProgress = { ...currentExerciseProgress, sets: [...currentExerciseProgress.sets] };\n    \n    // Create new set with default values\n    const newSetNumber = currentExerciseProgress.sets.length + 1;\n    const newSet = createEmptySetProgress(newSetNumber);\n    \n    // Set default values based on exercise type\n    if (currentExercise.unit === 'reps') {\n      newSet.reps = currentExercise.repsMin || 8;\n    } else if (currentExercise.unit === 'seconds') {\n      newSet.timeSeconds = currentExercise.timeSecondsMin || 30;\n    } else if (currentExercise.unit === 'steps') {\n      newSet.steps = currentExercise.stepsCount || 10;\n    }\n    \n    if (currentExercise.weight && currentExercise.weight > 0) {\n      newSet.weight = currentExercise.weight;\n    }\n    \n    updatedProgress.sets.push(newSet);\n    \n    saveWorkoutProgress(updatedProgress);\n    setWorkoutProgress(prev => {\n      const updated = prev.filter(p => p.exerciseId !== currentExercise.id);\n      updated.push(updatedProgress);\n      return updated;\n    });\n  }, [currentExercise, sessionId, currentExerciseProgress]);\n\n  const getRestDuration = (): number => {\n    return currentExercise?.restSeconds || 60;\n  };\n\n  const startRestTimer = () => {\n    const duration = getRestDuration();\n    setTimerType('rest');\n    setTimerSeconds(duration);\n    setIsTimerRunning(true);\n  };\n\n  const startStopwatch = () => {\n    setTimerType('stopwatch');\n    setTimerSeconds(0);\n    setIsTimerRunning(true);\n  };\n\n  const stopTimer = () => {\n    setIsTimerRunning(false);\n    setTimerType(null);\n    setTimerSeconds(0);\n  };\n\n  const toggleTimer = () => {\n    setIsTimerRunning(prev => !prev);\n  };\n\n  const resetTimer = () => {\n    if (timerType === 'rest') {\n      setTimerSeconds(getRestDuration());\n    } else {\n      setTimerSeconds(0);\n    }\n    setIsTimerRunning(false);\n  };\n\n  const updateSessionStatus = (status: 'in_progress' | 'completed' | 'skipped') => {\n    if (!sessionInstance) return;\n    \n    try {\n      if ('templateSnapshot' in sessionInstance) {\n        // SessionInstance\n        const updatedInstance: SessionInstance = {\n          ...sessionInstance,\n          status,\n          startedAt: status === 'in_progress' && !sessionInstance.startedAt \n            ? new Date().toISOString() \n            : sessionInstance.startedAt,\n          completedAt: status === 'completed' ? new Date().toISOString() : sessionInstance.completedAt\n        };\n        saveSessionInstance(updatedInstance);\n        setSessionInstance(updatedInstance);\n      } else {\n        // Legacy ScheduledSession\n        const updatedSession: ScheduledSession = {\n          ...sessionInstance,\n          status,\n          completedAt: status === 'completed' ? new Date().toISOString() : sessionInstance.completedAt\n        };\n        saveScheduledSession(updatedSession);\n        setSessionInstance(updatedSession);\n      }\n      \n      console.log(`Session status updated to: ${status}`);\n    } catch (error) {\n      console.error('Failed to update session status:', error);\n    }\n  };\n\n  const finishWorkout = () => {\n    updateSessionStatus('completed');\n    clearActiveWorkoutState();\n    console.log('Workout completed');\n    \n    // Navigate back to calendar\n    navigate('/');\n  };\n\n  const exitWorkout = () => {\n    clearActiveWorkoutState();\n    navigate('/');\n  };\n\n  if (!sessionId) {\n    return (\n      <div className=\"mobile-viewport flex items-center justify-center bg-background px-4\">\n        <div className=\"p-4 text-center\">\n          <p className=\"text-foreground\">Invalid session ID</p>\n        </div>\n      </div>\n    );\n  }\n  \n  if (sessionNotFound) {\n    return (\n      <div className=\"mobile-viewport flex items-center justify-center bg-background px-4\">\n        <div className=\"p-4 text-center\">\n          <p className=\"text-foreground mb-4\">Session not found</p>\n          <Button onClick={() => navigate('/')}>Return to Calendar</Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentExercise) {\n    return (\n      <div className=\"mobile-viewport flex items-center justify-center bg-background px-4\">\n        <GlassCard variant=\"tertiary\">\n          <div className=\"p-8 text-center\">\n            <h2 className=\"text-lg font-semibold text-white mb-2\">\n              Loading Workout...\n            </h2>\n            <p className=\"text-white/60\">\n              Please wait while we load your workout data.\n            </p>\n          </div>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  const formatTimerDisplay = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const currentSetProgress = currentExerciseProgress?.sets.find(s => s.setNumber === currentSetIndex + 1);\n  const completedSets = calculateCompletedSets(currentExerciseProgress);\n  const overallProgress = Math.round(((currentExerciseIndex + (completedSets / currentExercise.sets)) / exercises.length) * 100);\n\n  return (\n    <div className=\"mobile-viewport bg-background flex flex-col overflow-hidden\">\n      {/* 1. Progress Info Region with Exit Button */}\n      <div className=\"flex-none px-4 pt-safe pb-2\" data-testid=\"progress-info\">\n        <div className=\"flex items-stretch gap-3\">\n          {/* Exit Button on left side */}\n          <div className=\"flex-none self-stretch\">\n            <GlassCard \n              variant=\"secondary\" \n              onClick={exitWorkout}\n              className=\"w-12 h-full flex items-center justify-center cursor-pointer bg-destructive/20 border-destructive/40 text-destructive-foreground backdrop-blur-md\"\n              data-testid=\"button-exit-workout\"\n            >\n              <ChevronLeft \n                className=\"w-5 h-5\" \n              />\n            </GlassCard>\n          </div>\n          \n          {/* Progress box taking remaining space */}\n          <div className=\"flex-1\">\n            <GlassCard variant=\"secondary\" className=\"p-3\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"text-sm text-white/80\">\n                  Exercise {currentExerciseIndex + 1} of {exercises.length}\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-xs text-white/60\">Progress</div>\n                  <div className=\"text-lg font-bold text-white\">{overallProgress}%</div>\n                </div>\n              </div>\n              {/* Compact Progress Bar */}\n              <div className=\"w-full bg-white/20 rounded-full h-1.5\">\n                <div \n                  className=\"bg-primary h-1.5 rounded-full transition-all duration-300\"\n                  style={{ width: `${overallProgress}%` }}\n                />\n              </div>\n            </GlassCard>\n          </div>\n        </div>\n      </div>\n\n      {/* 2. Exercise Title Region */}\n      <div className=\"flex-none px-4 pb-2\" data-testid=\"exercise-title\">\n        <GlassCard variant=\"primary\" className=\"p-4 text-center\">\n          <h2 className=\"text-xl font-bold text-white mb-1\" data-testid=\"current-exercise-name\">\n            {currentExercise.name}\n          </h2>\n          <div className=\"text-sm text-blue-300\">\n            {currentExercise.muscleGroup}\n            {currentExercise.mainMuscle && currentExercise.mainMuscle !== currentExercise.muscleGroup && (\n              <span className=\"ml-2 text-white/60\">\n                • {currentExercise.mainMuscle}\n              </span>\n            )}\n          </div>\n        </GlassCard>\n      </div>\n\n      {/* 3. Set Progress Box Region */}\n      <div className=\"flex-1 px-4 pb-2 min-h-0\" data-testid=\"set-progress\">\n        <div className=\"h-full\">\n          {sessionStarted && currentExercise && sessionId ? (\n            <SetList \n              sessionId={sessionId}\n              currentExercise={currentExercise}\n              workoutProgress={workoutProgress}\n              onProgressUpdate={(updatedProgress) => setWorkoutProgress(updatedProgress)}\n            />\n          ) : (\n            <GlassCard variant=\"tertiary\" className=\"h-full flex items-center justify-center\">\n              <div className=\"text-center p-8\">\n                <h3 className=\"text-lg font-semibold text-white mb-2\">\n                  Ready to Start?\n                </h3>\n                <p className=\"text-white/60 text-sm\">\n                  Set tracking will appear here once you begin your workout.\n                </p>\n              </div>\n            </GlassCard>\n          )}\n        </div>\n      </div>\n\n      {/* 4. Collapsed Panels Region */}\n      {(currentExercise.formGuidance || currentExercise.notes) && (\n        <div className=\"flex-none px-4 pb-2\" data-testid=\"panels\">\n          <div className=\"space-y-2\">\n            {currentExercise.formGuidance && (\n              <Collapsible open={showFormGuidance} onOpenChange={setShowFormGuidance}>\n                <CollapsibleTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"w-full justify-between text-white border-white/20 hover:bg-white/10\"\n                    data-testid=\"button-toggle-form-guidance\"\n                  >\n                    <span>Form Guidance</span>\n                    <ChevronDown className={`w-4 h-4 transition-transform duration-200 ${\n                      showFormGuidance ? 'rotate-180' : ''\n                    }`} />\n                  </Button>\n                </CollapsibleTrigger>\n                <CollapsibleContent className=\"pt-2\">\n                  <GlassCard variant=\"tertiary\" className=\"p-3\">\n                    <div className=\"text-sm text-white/80\">\n                      {currentExercise.formGuidance}\n                    </div>\n                  </GlassCard>\n                </CollapsibleContent>\n              </Collapsible>\n            )}\n            \n            {currentExercise.notes && (\n              <Collapsible open={showNotes} onOpenChange={setShowNotes}>\n                <CollapsibleTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"w-full justify-between text-white border-white/20 hover:bg-white/10\"\n                    data-testid=\"button-toggle-notes\"\n                  >\n                    <span>Notes</span>\n                    <ChevronDown className={`w-4 h-4 transition-transform duration-200 ${\n                      showNotes ? 'rotate-180' : ''\n                    }`} />\n                  </Button>\n                </CollapsibleTrigger>\n                <CollapsibleContent className=\"pt-2\">\n                  <GlassCard variant=\"tertiary\" className=\"p-3\">\n                    <div className=\"text-sm text-white/80\">\n                      {currentExercise.notes}\n                    </div>\n                  </GlassCard>\n                </CollapsibleContent>\n              </Collapsible>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* 5. Complete Button Region */}\n      <div className=\"flex-none px-4 pb-2\" data-testid=\"complete\">\n        {!sessionStarted ? (\n          <Button\n            size=\"lg\"\n            variant=\"default\"\n            onClick={startWorkout}\n            className=\"w-full\"\n            data-testid=\"button-start-workout\"\n          >\n            <Play className=\"w-5 h-5 mr-2\" />\n            Start Workout\n          </Button>\n        ) : (\n          <Button\n            size=\"lg\"\n            variant=\"default\"\n            onClick={completeSet}\n            className=\"w-full\"\n            data-testid=\"button-complete-set\"\n          >\n            <CheckCircle className=\"w-5 h-5 mr-2\" />\n            Complete Set {currentSetIndex + 1}\n          </Button>\n        )}\n      </div>\n\n      {/* 6. Navigation Region */}\n      {sessionStarted && (\n        <div className=\"flex-none px-4 pb-2\" data-testid=\"navigation\">\n          <GlassCard variant=\"secondary\" className=\"p-3\">\n            <div className=\"flex items-center justify-between\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={previousExercise}\n                disabled={currentExerciseIndex === 0}\n                className=\"text-white border-white/20 hover:bg-white/10\"\n                data-testid=\"button-previous-exercise\"\n              >\n                <SkipBack className=\"w-4 h-4 mr-1\" />\n                Prev\n              </Button>\n              \n              {/* Set Status Indicators */}\n              <div className=\"flex gap-1 items-center\">\n                {Array.from({ length: currentExercise.sets }, (_, i) => {\n                  const setProgress = currentExerciseProgress?.sets.find(s => s.setNumber === i + 1);\n                  const isCompleted = setProgress?.completed || false;\n                  const isCurrent = i === currentSetIndex;\n                  \n                  return (\n                    <div\n                      key={i}\n                      className={`w-5 h-5 rounded-full flex items-center justify-center text-xs font-bold ${\n                        isCompleted \n                          ? 'bg-green-500 text-white'\n                          : isCurrent\n                          ? 'bg-primary text-white'\n                          : 'bg-white/20 text-white/50'\n                      }`}\n                    >\n                      {isCompleted ? '✓' : i + 1}\n                    </div>\n                  );\n                })}\n                \n                {/* Add Set Button */}\n                {currentExerciseProgress && currentExerciseProgress.sets.length < 12 && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={handleAddSet}\n                    className=\"w-5 h-5 p-0 rounded-full text-white border-white/20 hover:bg-white/10 hover:border-white/30\"\n                    data-testid=\"button-add-set\"\n                  >\n                    <Plus className=\"w-3 h-3\" />\n                  </Button>\n                )}\n              </div>\n              \n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={nextExercise}\n                disabled={currentExerciseIndex >= exercises.length - 1}\n                className=\"text-white border-white/20 hover:bg-white/10\"\n                data-testid=\"button-next-exercise\"\n              >\n                Next\n                <SkipForward className=\"w-4 h-4 ml-1\" />\n              </Button>\n            </div>\n          </GlassCard>\n        </div>\n      )}\n\n      {/* 7. Timer Box Region - Pinned at Bottom */}\n      {sessionStarted && (\n        <div className=\"flex-none px-4 pb-safe\" data-testid=\"timer\">\n          <GlassCard variant=\"tertiary\" className=\"p-3\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h3 className=\"text-sm font-semibold text-white\">Timer</h3>\n              <div className=\"flex gap-1\">\n                <Button\n                  size=\"sm\"\n                  variant={timerType === 'rest' ? 'default' : 'outline'}\n                  onClick={startRestTimer}\n                  className=\"text-xs px-2 py-1 text-white border-white/20 hover:bg-white/10\"\n                  data-testid=\"button-rest-timer\"\n                >\n                  <Timer className=\"w-3 h-3 mr-1\" />\n                  Rest\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant={timerType === 'stopwatch' ? 'default' : 'outline'}\n                  onClick={startStopwatch}\n                  className=\"text-xs px-2 py-1 text-white border-white/20 hover:bg-white/10\"\n                  data-testid=\"button-stopwatch\"\n                >\n                  <Clock className=\"w-3 h-3 mr-1\" />\n                  Stopwatch\n                </Button>\n              </div>\n            </div>\n\n            {timerType && (\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-mono font-bold text-white mb-2\">\n                  {formatTimerDisplay(timerSeconds)}\n                </div>\n                <div className=\"flex justify-center gap-1\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={toggleTimer}\n                    className=\"text-xs px-2 py-1 text-white border-white/20 hover:bg-white/10\"\n                    data-testid=\"button-toggle-timer\"\n                  >\n                    {isTimerRunning ? (\n                      <>\n                        <Pause className=\"w-3 h-3 mr-1\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-3 h-3 mr-1\" />\n                        Start\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={resetTimer}\n                    className=\"text-xs px-2 py-1 text-white border-white/20 hover:bg-white/10\"\n                    data-testid=\"button-reset-timer\"\n                  >\n                    <RotateCcw className=\"w-3 h-3 mr-1\" />\n                    Reset\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={stopTimer}\n                    className=\"text-xs px-2 py-1 text-white border-white/20 hover:bg-white/10\"\n                    data-testid=\"button-stop-timer\"\n                  >\n                    <Square className=\"w-3 h-3 mr-1\" />\n                    Stop\n                  </Button>\n                </div>\n              </div>\n            )}\n          </GlassCard>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":26986},"client/src/utils/sessionStorage.ts":{"content":"// Session and calendar storage utilities\nimport { \n  SessionTemplate, \n  SessionInstance,\n  ScheduledSession, \n  WorkoutProgress, \n  SetProgress,\n  SessionExercise,\n  SessionTemplateInsert,\n  SessionInstanceInsert,\n  WorkoutProgressInsert,\n  SetProgressInsert\n} from \"@shared/schema\";\n\nconst STORAGE_KEYS = {\n  SESSION_TEMPLATES: 'fittracker_session_templates',\n  SESSION_INSTANCES: 'fittracker_session_instances',\n  SCHEDULED_SESSIONS: 'fittracker_scheduled_sessions', // Legacy key for migration\n  WORKOUT_PROGRESS: 'fittracker_workout_progress',\n  ACTIVE_WORKOUT: 'fittracker_active_workout'\n} as const;\n\n// Utility functions for auto-timestamps\nfunction generateId(): string {\n  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\nfunction getCurrentISOString(): string {\n  return new Date().toISOString();\n}\n\nfunction formatLocalDate(date: Date = new Date()): string {\n  // Format as YYYY-MM-DD in local timezone\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\nfunction parseLocalDate(dateString: string): Date {\n  // Parse YYYY-MM-DD as local date (not UTC)\n  const [year, month, day] = dateString.split('-').map(Number);\n  return new Date(year, month - 1, day);\n}\n\n// Session Template Management\nexport function saveSessionTemplate(templateData: SessionTemplateInsert | SessionTemplate): SessionTemplate {\n  try {\n    const templates = loadSessionTemplates();\n    const now = getCurrentISOString();\n    \n    let template: SessionTemplate;\n    if ('id' in templateData) {\n      // Updating existing template\n      template = { ...templateData, updatedAt: now };\n      const existingIndex = templates.findIndex(t => t.id === template.id);\n      if (existingIndex >= 0) {\n        templates[existingIndex] = template;\n      } else {\n        templates.push(template);\n      }\n    } else {\n      // Creating new template\n      template = {\n        ...templateData,\n        id: generateId(),\n        createdAt: now,\n        updatedAt: now\n      };\n      templates.push(template);\n    }\n    \n    localStorage.setItem(STORAGE_KEYS.SESSION_TEMPLATES, JSON.stringify(templates));\n    console.log('Session template saved:', template.name);\n    return template;\n  } catch (error) {\n    console.error('Failed to save session template:', error);\n    throw new Error('Failed to save session template');\n  }\n}\n\nexport function loadSessionTemplates(): SessionTemplate[] {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.SESSION_TEMPLATES);\n    return stored ? JSON.parse(stored) : [];\n  } catch (error) {\n    console.error('Failed to load session templates:', error);\n    return [];\n  }\n}\n\nexport function deleteSessionTemplate(templateId: string): void {\n  try {\n    const templates = loadSessionTemplates();\n    const filtered = templates.filter(t => t.id !== templateId);\n    localStorage.setItem(STORAGE_KEYS.SESSION_TEMPLATES, JSON.stringify(filtered));\n    console.log('Session template deleted:', templateId);\n  } catch (error) {\n    console.error('Failed to delete session template:', error);\n  }\n}\n\nexport function getSessionTemplate(templateId: string): SessionTemplate | null {\n  const templates = loadSessionTemplates();\n  return templates.find(t => t.id === templateId) || null;\n}\n\n// Session Instance Management (replaces Scheduled Session)\nexport function saveSessionInstance(instanceData: SessionInstanceInsert | SessionInstance): SessionInstance {\n  try {\n    const instances = loadSessionInstances();\n    const now = getCurrentISOString();\n    \n    let instance: SessionInstance;\n    if ('id' in instanceData) {\n      // Updating existing instance\n      instance = instanceData;\n      const existingIndex = instances.findIndex(s => s.id === instance.id);\n      if (existingIndex >= 0) {\n        instances[existingIndex] = instance;\n      } else {\n        instances.push(instance);\n      }\n    } else {\n      // Creating new instance\n      instance = {\n        ...instanceData,\n        id: generateId(),\n        scheduledAt: now\n      };\n      instances.push(instance);\n    }\n    \n    localStorage.setItem(STORAGE_KEYS.SESSION_INSTANCES, JSON.stringify(instances));\n    console.log('Session instance saved:', instance.date);\n    return instance;\n  } catch (error) {\n    console.error('Failed to save session instance:', error);\n    throw new Error('Failed to save session instance');\n  }\n}\n\nexport function loadSessionInstances(): SessionInstance[] {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.SESSION_INSTANCES);\n    return stored ? JSON.parse(stored) : [];\n  } catch (error) {\n    console.error('Failed to load session instances:', error);\n    return [];\n  }\n}\n\nexport function getSessionInstancesForDate(date: string): SessionInstance[] {\n  const instances = loadSessionInstances();\n  return instances.filter(s => s.date === date);\n}\n\nexport function getSessionInstancesForDateRange(startDate: string, endDate: string): SessionInstance[] {\n  const instances = loadSessionInstances();\n  return instances.filter(s => s.date >= startDate && s.date <= endDate);\n}\n\nexport function deleteSessionInstance(instanceId: string): void {\n  try {\n    const instances = loadSessionInstances();\n    const filtered = instances.filter(s => s.id !== instanceId);\n    localStorage.setItem(STORAGE_KEYS.SESSION_INSTANCES, JSON.stringify(filtered));\n    console.log('Session instance deleted:', instanceId);\n  } catch (error) {\n    console.error('Failed to delete session instance:', error);\n  }\n}\n\nexport function createSessionInstanceFromTemplate(template: SessionTemplate, date: string, startTime?: string): SessionInstance {\n  const instanceData: SessionInstanceInsert = {\n    templateId: template.id,\n    templateSnapshot: {\n      name: template.name,\n      description: template.description,\n      exercises: template.exercises,\n      estimatedDurationMinutes: template.estimatedDurationMinutes,\n      tags: template.tags\n    },\n    date,\n    startTime,\n    status: 'scheduled'\n  };\n  \n  return saveSessionInstance(instanceData);\n}\n\n// Legacy Scheduled Session Management (for backward compatibility)\nexport function saveScheduledSession(session: ScheduledSession): void {\n  try {\n    const sessions = loadScheduledSessions();\n    const existingIndex = sessions.findIndex(s => s.id === session.id);\n    \n    if (existingIndex >= 0) {\n      sessions[existingIndex] = session;\n    } else {\n      sessions.push(session);\n    }\n    \n    localStorage.setItem(STORAGE_KEYS.SCHEDULED_SESSIONS, JSON.stringify(sessions));\n    console.log('Scheduled session saved:', session.date);\n  } catch (error) {\n    console.error('Failed to save scheduled session:', error);\n  }\n}\n\nexport function loadScheduledSessions(): ScheduledSession[] {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.SCHEDULED_SESSIONS);\n    return stored ? JSON.parse(stored) : [];\n  } catch (error) {\n    console.error('Failed to load scheduled sessions:', error);\n    return [];\n  }\n}\n\nexport function getScheduledSessionsForDate(date: string): ScheduledSession[] {\n  const sessions = loadScheduledSessions();\n  return sessions.filter(s => s.date === date);\n}\n\nexport function getScheduledSessionsForDateRange(startDate: string, endDate: string): ScheduledSession[] {\n  const sessions = loadScheduledSessions();\n  return sessions.filter(s => s.date >= startDate && s.date <= endDate);\n}\n\nexport function deleteScheduledSession(sessionId: string): void {\n  try {\n    const sessions = loadScheduledSessions();\n    const filtered = sessions.filter(s => s.id !== sessionId);\n    localStorage.setItem(STORAGE_KEYS.SCHEDULED_SESSIONS, JSON.stringify(filtered));\n    console.log('Scheduled session deleted:', sessionId);\n  } catch (error) {\n    console.error('Failed to delete scheduled session:', error);\n  }\n}\n\n// Migration utility to convert legacy ScheduledSessions to SessionInstances\nexport function migrateLegacyScheduledSessions(): void {\n  try {\n    const legacySessions = loadScheduledSessions();\n    if (legacySessions.length === 0) return;\n    \n    console.log(`Migrating ${legacySessions.length} legacy scheduled sessions...`);\n    const templates = loadSessionTemplates();\n    \n    legacySessions.forEach(legacySession => {\n      const template = templates.find(t => t.id === legacySession.templateId);\n      if (template) {\n        const instance: SessionInstance = {\n          id: legacySession.id,\n          templateId: legacySession.templateId,\n          templateSnapshot: {\n            name: template.name,\n            description: template.description,\n            exercises: template.exercises,\n            estimatedDurationMinutes: template.estimatedDurationMinutes,\n            tags: template.tags\n          },\n          date: legacySession.date,\n          startTime: legacySession.startTime,\n          status: legacySession.status,\n          scheduledAt: legacySession.completedAt || getCurrentISOString(),\n          completedAt: legacySession.completedAt,\n          notes: legacySession.notes\n        };\n        \n        saveSessionInstance(instance);\n      }\n    });\n    \n    // Clear legacy data after migration\n    localStorage.removeItem(STORAGE_KEYS.SCHEDULED_SESSIONS);\n    console.log('Legacy scheduled sessions migrated successfully');\n  } catch (error) {\n    console.error('Failed to migrate legacy scheduled sessions:', error);\n  }\n}\n\n// Workout Progress Management\nexport function saveWorkoutProgress(progressData: WorkoutProgressInsert | WorkoutProgress): WorkoutProgress {\n  try {\n    const allProgress = loadAllWorkoutProgress();\n    const now = getCurrentISOString();\n    \n    let progress: WorkoutProgress;\n    if ('startedAt' in progressData) {\n      // Updating existing progress\n      progress = progressData;\n    } else {\n      // Creating new progress\n      progress = {\n        ...progressData,\n        startedAt: now\n      };\n    }\n    \n    const existingIndex = allProgress.findIndex(\n      p => p.sessionId === progress.sessionId && p.exerciseId === progress.exerciseId\n    );\n    \n    if (existingIndex >= 0) {\n      allProgress[existingIndex] = progress;\n    } else {\n      allProgress.push(progress);\n    }\n    \n    localStorage.setItem(STORAGE_KEYS.WORKOUT_PROGRESS, JSON.stringify(allProgress));\n    return progress;\n  } catch (error) {\n    console.error('Failed to save workout progress:', error);\n    throw new Error('Failed to save workout progress');\n  }\n}\n\nexport function markExerciseCompleted(sessionId: string, exerciseId: string): WorkoutProgress {\n  const progress = getExerciseProgress(sessionId, exerciseId);\n  if (progress) {\n    const updatedProgress = {\n      ...progress,\n      completedAt: getCurrentISOString()\n    };\n    return saveWorkoutProgress(updatedProgress);\n  } else {\n    throw new Error('Exercise progress not found');\n  }\n}\n\nexport function loadAllWorkoutProgress(): WorkoutProgress[] {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.WORKOUT_PROGRESS);\n    return stored ? JSON.parse(stored) : [];\n  } catch (error) {\n    console.error('Failed to load workout progress:', error);\n    return [];\n  }\n}\n\nexport function getWorkoutProgress(sessionId: string): WorkoutProgress[] {\n  const allProgress = loadAllWorkoutProgress();\n  return allProgress.filter(p => p.sessionId === sessionId);\n}\n\nexport function getExerciseProgress(sessionId: string, exerciseId: string): WorkoutProgress | null {\n  const allProgress = loadAllWorkoutProgress();\n  return allProgress.find(p => p.sessionId === sessionId && p.exerciseId === exerciseId) || null;\n}\n\n// Active Workout State Management\nexport interface ActiveWorkoutState {\n  sessionId: string;\n  instanceId: string; // Changed from templateId to support SessionInstance\n  currentExerciseIndex: number;\n  currentSetIndex: number;\n  startedAt: string;\n  timerState?: {\n    type: 'rest' | 'stopwatch';\n    startTime: number;\n    duration?: number; // For rest timer\n    isRunning: boolean;\n  };\n}\n\nexport function startWorkoutSession(instance: SessionInstance): ActiveWorkoutState {\n  const activeState: ActiveWorkoutState = {\n    sessionId: instance.id,\n    instanceId: instance.id,\n    currentExerciseIndex: 0,\n    currentSetIndex: 0,\n    startedAt: getCurrentISOString()\n  };\n  \n  // Update instance status to in_progress\n  const updatedInstance: SessionInstance = {\n    ...instance,\n    status: 'in_progress',\n    startedAt: getCurrentISOString()\n  };\n  saveSessionInstance(updatedInstance);\n  \n  saveActiveWorkoutState(activeState);\n  return activeState;\n}\n\nexport function completeWorkoutSession(sessionId: string): void {\n  // Mark session as completed\n  const instances = loadSessionInstances();\n  const instanceIndex = instances.findIndex(i => i.id === sessionId);\n  if (instanceIndex >= 0) {\n    instances[instanceIndex] = {\n      ...instances[instanceIndex],\n      status: 'completed',\n      completedAt: getCurrentISOString()\n    };\n    localStorage.setItem(STORAGE_KEYS.SESSION_INSTANCES, JSON.stringify(instances));\n  }\n  \n  // Clear active workout state\n  clearActiveWorkoutState();\n  console.log('Workout session completed:', sessionId);\n}\n\nexport function saveActiveWorkoutState(state: ActiveWorkoutState): void {\n  try {\n    localStorage.setItem(STORAGE_KEYS.ACTIVE_WORKOUT, JSON.stringify(state));\n    console.log('Active workout state saved:', state.sessionId);\n  } catch (error) {\n    console.error('Failed to save active workout state:', error);\n  }\n}\n\nexport function loadActiveWorkoutState(): ActiveWorkoutState | null {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEYS.ACTIVE_WORKOUT);\n    return stored ? JSON.parse(stored) : null;\n  } catch (error) {\n    console.error('Failed to load active workout state:', error);\n    return null;\n  }\n}\n\nexport function clearActiveWorkoutState(): void {\n  localStorage.removeItem(STORAGE_KEYS.ACTIVE_WORKOUT);\n}\n\n// Set progress utilities\nexport function createSetProgress(setNumber: number, data: Partial<SetProgressInsert> = {}): SetProgress {\n  return {\n    setNumber,\n    completed: false,\n    restTimerUsed: false,\n    ...data\n  };\n}\n\nexport function markSetCompleted(sessionId: string, exerciseId: string, setNumber: number, setData: Partial<SetProgressInsert> = {}): WorkoutProgress {\n  let progress = getExerciseProgress(sessionId, exerciseId);\n  \n  if (!progress) {\n    // Create new progress if it doesn't exist\n    progress = {\n      sessionId,\n      exerciseId,\n      sets: [],\n      startedAt: getCurrentISOString()\n    };\n  }\n  \n  // Find or create the set\n  const setIndex = progress.sets.findIndex(s => s.setNumber === setNumber);\n  const completedSet: SetProgress = {\n    setNumber,\n    completed: true,\n    completedAt: getCurrentISOString(),\n    restTimerUsed: false,\n    ...setData\n  };\n  \n  if (setIndex >= 0) {\n    progress.sets[setIndex] = completedSet;\n  } else {\n    progress.sets.push(completedSet);\n  }\n  \n  return saveWorkoutProgress(progress);\n}\n\n// Migration utilities for existing CSV data\nexport function convertCSVDataToTemplates(csvData: any[]): SessionTemplate[] {\n  // Group exercises by day\n  const dayGroups = csvData.reduce((groups, exercise) => {\n    const dayKey = exercise.dayKey || exercise.day;\n    if (!groups[dayKey]) {\n      groups[dayKey] = {\n        day: exercise.day,\n        exercises: []\n      };\n    }\n    groups[dayKey].exercises.push(exercise);\n    return groups;\n  }, {} as any);\n\n  // Convert each day to a session template\n  return Object.values(dayGroups).map((group: any, index) => {\n    const exercises: SessionExercise[] = group.exercises.map((ex: any, exIndex: number) => ({\n      id: generateId(),\n      name: ex.exercise || ex.name,\n      sets: ex.sets,\n      repsMin: ex.prescription?.repsMin || ex.repsMin,\n      repsMax: ex.prescription?.repsMax || ex.repsMax,\n      timeSecondsMin: ex.prescription?.timeSecondsMin || ex.timeSecondsMin,\n      timeSecondsMax: ex.prescription?.timeSecondsMax || ex.timeSecondsMax,\n      stepsCount: ex.prescription?.stepsCount || ex.stepsCount,\n      unit: ex.prescription?.unit || ex.unit || 'reps',\n      perSide: ex.prescription?.perSide || ex.perSide || false,\n      weight: ex.weight,\n      notes: ex.notes,\n      formGuidance: ex.formGuidance,\n      muscleGroup: ex.muscleGroup || 'Unknown',\n      mainMuscle: ex.mainMuscle || 'Unknown',\n      restSeconds: 60 // Default rest time\n    }));\n\n    const templateData: SessionTemplateInsert = {\n      name: group.day,\n      description: `Imported from CSV data`,\n      exercises,\n      estimatedDurationMinutes: exercises.length * 3, // Rough estimate\n      tags: ['imported', 'csv']\n    };\n\n    return saveSessionTemplate(templateData);\n  });\n}\n\n// Utility functions for date handling (using local timezone)\nexport function formatDate(date: Date = new Date()): string {\n  return formatLocalDate(date);\n}\n\nexport function parseDate(dateString: string): Date {\n  return parseLocalDate(dateString);\n}\n\nexport function isToday(dateString: string): boolean {\n  return dateString === formatLocalDate(new Date());\n}\n\nexport function getWeekDates(date: Date = new Date()): string[] {\n  const week = [];\n  const startOfWeek = new Date(date);\n  startOfWeek.setDate(date.getDate() - date.getDay()); // Start on Sunday\n  \n  for (let i = 0; i < 7; i++) {\n    const day = new Date(startOfWeek);\n    day.setDate(startOfWeek.getDate() + i);\n    week.push(formatLocalDate(day));\n  }\n  \n  return week;\n}\n\nexport function getTodayString(): string {\n  return formatLocalDate(new Date());\n}\n\nexport function addDays(dateString: string, days: number): string {\n  const date = parseLocalDate(dateString);\n  date.setDate(date.getDate() + days);\n  return formatLocalDate(date);\n}\n\n// Initialize and run migrations on first load\nif (typeof window !== 'undefined') {\n  // Run migration on module load\n  setTimeout(() => {\n    migrateLegacyScheduledSessions();\n  }, 100);\n}","size_bytes":17862},"client/src/utils/trainingCsvParser.ts":{"content":"import { SessionTemplate, SessionExercise } from \"@shared/schema\";\nimport { generateUniqueId, estimateSessionDuration } from \"./workoutHelpers\";\n\nexport interface ParsedTrainingCSV {\n  sessions: SessionTemplate[];\n  errors: string[];\n}\n\nexport interface CSVRow {\n  Day: string;\n  Exercise: string;\n  Sets: string;\n  'Reps/Time': string;\n  Weight: string;\n  Notes: string;\n  'Form Guidance': string;\n  'Muscle Group': string;\n  'Main Muscle': string;\n}\n\n/**\n * Parse the training CSV file and convert to session templates\n * Groups exercises by Day column, preserving order within each day\n */\nexport function parseTrainingCSV(csvContent: string): ParsedTrainingCSV {\n  const errors: string[] = [];\n  const sessions: SessionTemplate[] = [];\n  \n  try {\n    // Parse CSV content\n    const lines = csvContent.trim().split(/\\r?\\n/);\n    if (lines.length < 2) {\n      errors.push('CSV file must have at least a header and one data row');\n      return { sessions, errors };\n    }\n\n    // Parse header\n    const header = lines[0].split(',').map(col => col.trim());\n    const expectedColumns = ['Day', 'Exercise', 'Sets', 'Reps/Time', 'Weight', 'Notes', 'Form Guidance', 'Muscle Group', 'Main Muscle'];\n    \n    // Validate header columns\n    for (const expectedCol of expectedColumns) {\n      if (!header.includes(expectedCol)) {\n        errors.push(`Missing required column: ${expectedCol}`);\n      }\n    }\n    \n    if (errors.length > 0) {\n      return { sessions, errors };\n    }\n\n    // Parse data rows\n    const rows: CSVRow[] = [];\n    for (let i = 1; i < lines.length; i++) {\n      const values = parseCSVLine(lines[i]);\n      if (values.length !== header.length) {\n        errors.push(`Row ${i + 1}: Expected ${header.length} columns, got ${values.length}`);\n        continue;\n      }\n      \n      const row: any = {};\n      header.forEach((col, index) => {\n        row[col] = values[index].trim();\n      });\n      rows.push(row as CSVRow);\n    }\n\n    // Group exercises by Day\n    const dayGroups = new Map<string, CSVRow[]>();\n    rows.forEach(row => {\n      if (!row.Day) {\n        errors.push(`Row with exercise \"${row.Exercise}\" has no Day specified`);\n        return;\n      }\n      \n      if (!dayGroups.has(row.Day)) {\n        dayGroups.set(row.Day, []);\n      }\n      dayGroups.get(row.Day)!.push(row);\n    });\n\n    // Convert each day group to a session template\n    dayGroups.forEach((exercises, dayName) => {\n      try {\n        const sessionTemplate = convertDayToSessionTemplate(dayName, exercises);\n        sessions.push(sessionTemplate);\n      } catch (error) {\n        errors.push(`Error processing ${dayName}: ${error}`);\n      }\n    });\n\n  } catch (error) {\n    errors.push(`Failed to parse CSV: ${error}`);\n  }\n\n  return { sessions, errors };\n}\n\n/**\n * Parse a CSV line handling quoted values and commas\n */\nfunction parseCSVLine(line: string): string[] {\n  const result: string[] = [];\n  let current = '';\n  let inQuotes = false;\n  \n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    \n    if (char === '\"') {\n      inQuotes = !inQuotes;\n    } else if (char === ',' && !inQuotes) {\n      result.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  \n  result.push(current);\n  return result;\n}\n\n/**\n * Convert a day's exercises to a SessionTemplate\n */\nfunction convertDayToSessionTemplate(dayName: string, exercises: CSVRow[]): SessionTemplate {\n  const sessionExercises: SessionExercise[] = [];\n  \n  exercises.forEach((row, index) => {\n    try {\n      const exercise = convertRowToSessionExercise(row, index);\n      sessionExercises.push(exercise);\n    } catch (error) {\n      throw new Error(`Exercise \"${row.Exercise}\": ${error}`);\n    }\n  });\n  \n  // Extract tags from day name\n  const tags = extractTagsFromDayName(dayName);\n  \n  const template: SessionTemplate = {\n    id: generateUniqueId(),\n    name: dayName,\n    description: `${sessionExercises.length} exercises targeting ${tags.join(', ').toLowerCase()}`,\n    exercises: sessionExercises,\n    estimatedDurationMinutes: estimateSessionDuration(sessionExercises),\n    tags: tags,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  \n  return template;\n}\n\n/**\n * Convert a CSV row to a SessionExercise\n */\nfunction convertRowToSessionExercise(row: CSVRow, order: number): SessionExercise {\n  // Parse sets\n  const sets = parseInt(row.Sets);\n  if (isNaN(sets) || sets < 1) {\n    throw new Error(`Invalid sets value: \"${row.Sets}\"`);\n  }\n  \n  // Parse reps/time prescription\n  const { unit, repsMin, repsMax, timeSecondsMin, timeSecondsMax, stepsCount, perSide } = parseRepsTime(row['Reps/Time']);\n  \n  // Parse weight (optional)\n  let weight: number | undefined;\n  if (row.Weight && row.Weight.trim()) {\n    const weightMatch = row.Weight.match(/(\\d+(?:\\.\\d+)?)/);\n    if (weightMatch) {\n      weight = parseFloat(weightMatch[1]);\n    }\n  }\n  \n  // Calculate rest time based on exercise type (basic heuristic)\n  const restSeconds = calculateRestTime(row['Muscle Group'], sets);\n  \n  const exercise: SessionExercise = {\n    id: generateUniqueId(),\n    name: row.Exercise,\n    sets,\n    repsMin,\n    repsMax,\n    timeSecondsMin,\n    timeSecondsMax,\n    stepsCount,\n    unit,\n    perSide,\n    weight,\n    notes: row.Notes || undefined,\n    formGuidance: row['Form Guidance'] || undefined,\n    muscleGroup: row['Muscle Group'],\n    mainMuscle: row['Main Muscle'],\n    restSeconds\n  };\n  \n  return exercise;\n}\n\n/**\n * Parse the Reps/Time column to determine exercise prescription\n */\nfunction parseRepsTime(repsTimeStr: string): {\n  unit: 'reps' | 'seconds' | 'steps';\n  repsMin?: number;\n  repsMax?: number;\n  timeSecondsMin?: number;\n  timeSecondsMax?: number;\n  stepsCount?: number;\n  perSide: boolean;\n} {\n  const str = repsTimeStr.trim().toLowerCase();\n  \n  // Check for per-side indicators\n  const perSide = /\\/side|\\/leg|per side|per leg|each side|each leg/i.test(str);\n  \n  // Clean the string for parsing\n  const cleanStr = str.replace(/\\/side|\\/leg|per side|per leg|each side|each leg/gi, '').trim();\n  \n  // Check for time-based units\n  if (/\\d+\\s*s\\b|seconds?|min|minutes?/.test(cleanStr)) {\n    const timeMatch = cleanStr.match(/(\\d+)(?:-(\\d+))?\\s*(?:s\\b|seconds?|min|minutes?)/);\n    if (timeMatch) {\n      const minTime = parseInt(timeMatch[1]);\n      const maxTime = timeMatch[2] ? parseInt(timeMatch[2]) : minTime;\n      \n      // Convert minutes to seconds\n      const minSeconds = cleanStr.includes('min') ? minTime * 60 : minTime;\n      const maxSeconds = cleanStr.includes('min') ? maxTime * 60 : maxTime;\n      \n      return {\n        unit: 'seconds',\n        timeSecondsMin: minSeconds,\n        timeSecondsMax: maxSeconds,\n        perSide\n      };\n    }\n  }\n  \n  // Check for steps\n  if (/steps?/.test(cleanStr)) {\n    const stepsMatch = cleanStr.match(/(\\d+)\\s*steps?/);\n    if (stepsMatch) {\n      return {\n        unit: 'steps',\n        stepsCount: parseInt(stepsMatch[1]),\n        perSide\n      };\n    }\n  }\n  \n  // Default to reps - parse ranges like \"10-12\" or single values like \"15\"\n  const repsMatch = cleanStr.match(/(\\d+)(?:-(\\d+))?/);\n  if (repsMatch) {\n    const minReps = parseInt(repsMatch[1]);\n    const maxReps = repsMatch[2] ? parseInt(repsMatch[2]) : minReps;\n    \n    return {\n      unit: 'reps',\n      repsMin: minReps,\n      repsMax: maxReps,\n      perSide\n    };\n  }\n  \n  // Fallback - treat as single rep value\n  const fallbackMatch = str.match(/\\d+/);\n  if (fallbackMatch) {\n    const reps = parseInt(fallbackMatch[0]);\n    return {\n      unit: 'reps',\n      repsMin: reps,\n      repsMax: reps,\n      perSide\n    };\n  }\n  \n  throw new Error(`Unable to parse reps/time: \"${repsTimeStr}\"`);\n}\n\n/**\n * Extract meaningful tags from day name\n */\nfunction extractTagsFromDayName(dayName: string): string[] {\n  const tags: string[] = [];\n  const lowerName = dayName.toLowerCase();\n  \n  // Extract main muscle groups\n  if (lowerName.includes('push')) tags.push('Push');\n  if (lowerName.includes('pull')) tags.push('Pull');\n  if (lowerName.includes('legs')) tags.push('Legs');\n  if (lowerName.includes('shoulders')) tags.push('Shoulders');\n  if (lowerName.includes('abs')) tags.push('Abs');\n  if (lowerName.includes('cardio')) tags.push('Cardio');\n  if (lowerName.includes('arms')) tags.push('Arms');\n  \n  // Add training type tags\n  if (lowerName.includes('cardio')) tags.push('Conditioning');\n  if (lowerName.includes('strength') || lowerName.includes('power')) tags.push('Strength');\n  \n  return tags.length > 0 ? tags : ['General'];\n}\n\n/**\n * Calculate appropriate rest time based on muscle group and intensity\n */\nfunction calculateRestTime(muscleGroup: string, sets: number): number {\n  const group = muscleGroup.toLowerCase();\n  \n  // Longer rest for compound movements and heavy lifting\n  if (group.includes('chest') || group.includes('back') || group.includes('legs')) {\n    return sets >= 4 ? 180 : 120; // 2-3 minutes\n  }\n  \n  // Medium rest for isolation work\n  if (group.includes('shoulders') || group.includes('triceps') || group.includes('biceps')) {\n    return 90; // 1.5 minutes\n  }\n  \n  // Shorter rest for cardio and conditioning\n  if (group.includes('conditioning') || group.includes('cardio') || group.includes('core')) {\n    return 60; // 1 minute\n  }\n  \n  // Default rest time\n  return 90;\n}","size_bytes":9311},"client/src/utils/workoutHelpers.ts":{"content":"// Workout utility functions\nimport { \n  SessionExercise, \n  SessionInstance,\n  SessionTemplate,\n  SetProgress, \n  WorkoutProgress \n} from \"@shared/schema\";\n\nexport function calculateCompletedSets(progress: WorkoutProgress | null): number {\n  if (!progress) return 0;\n  return progress.sets.filter(set => set.completed).length;\n}\n\nexport function isExerciseCompleted(exercise: SessionExercise, progress: WorkoutProgress | null): boolean {\n  if (!progress) return false;\n  const completedSets = calculateCompletedSets(progress);\n  return completedSets >= exercise.sets;\n}\n\nexport function getNextIncompleteSet(exercise: SessionExercise, progress: WorkoutProgress | null): number {\n  if (!progress) return 1;\n  \n  for (let i = 0; i < exercise.sets; i++) {\n    const setProgress = progress.sets.find(s => s.setNumber === i + 1);\n    if (!setProgress || !setProgress.completed) {\n      return i + 1;\n    }\n  }\n  \n  return exercise.sets; // All sets completed, return last set\n}\n\nexport function formatExercisePrescription(exercise: SessionExercise): string {\n  switch (exercise.unit) {\n    case 'reps':\n      if (exercise.repsMin && exercise.repsMax) {\n        if (exercise.repsMin === exercise.repsMax) {\n          return `${exercise.repsMin} reps`;\n        }\n        return `${exercise.repsMin}-${exercise.repsMax} reps`;\n      }\n      return exercise.repsMin ? `${exercise.repsMin} reps` : 'Reps';\n    \n    case 'seconds':\n      if (exercise.timeSecondsMin && exercise.timeSecondsMax) {\n        if (exercise.timeSecondsMin === exercise.timeSecondsMax) {\n          return `${exercise.timeSecondsMin}s`;\n        }\n        return `${exercise.timeSecondsMin}-${exercise.timeSecondsMax}s`;\n      }\n      return exercise.timeSecondsMin ? `${exercise.timeSecondsMin}s` : 'Time';\n    \n    case 'steps':\n      return exercise.stepsCount ? `${exercise.stepsCount} steps` : 'Steps';\n    \n    default:\n      return '';\n  }\n}\n\nexport function formatWeight(weight: number | undefined): string {\n  if (weight === undefined || weight === null) return '';\n  if (weight === 0) return '0kg';\n  return weight % 1 === 0 ? `${weight}kg` : `${weight.toFixed(1)}kg`;\n}\n\nexport function formatRestTime(seconds: number): string {\n  if (seconds < 60) {\n    return `${seconds}s`;\n  }\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  if (remainingSeconds === 0) {\n    return `${minutes}m`;\n  }\n  return `${minutes}m ${remainingSeconds}s`;\n}\n\nexport function calculateSessionProgress(exercises: SessionExercise[], progressList: WorkoutProgress[]): {\n  completedExercises: number;\n  totalExercises: number;\n  completedSets: number;\n  totalSets: number;\n  percentage: number;\n} {\n  const totalExercises = exercises.length;\n  const totalSets = exercises.reduce((sum, ex) => sum + ex.sets, 0);\n  \n  let completedExercises = 0;\n  let completedSets = 0;\n  \n  exercises.forEach(exercise => {\n    const progress = progressList.find(p => p.exerciseId === exercise.id) || null;\n    const exerciseCompletedSets = calculateCompletedSets(progress);\n    completedSets += exerciseCompletedSets;\n    \n    if (exerciseCompletedSets >= exercise.sets) {\n      completedExercises++;\n    }\n  });\n  \n  const percentage = totalSets > 0 ? Math.round((completedSets / totalSets) * 100) : 0;\n  \n  return {\n    completedExercises,\n    totalExercises,\n    completedSets,\n    totalSets,\n    percentage\n  };\n}\n\n// SessionInstance helper functions\nexport function calculateInstanceProgress(instance: SessionInstance, progressList: WorkoutProgress[]): {\n  completedExercises: number;\n  totalExercises: number;\n  completedSets: number;\n  totalSets: number;\n  percentage: number;\n} {\n  return calculateSessionProgress(instance.templateSnapshot.exercises, progressList);\n}\n\nexport function getInstanceExercises(instance: SessionInstance): SessionExercise[] {\n  return instance.templateSnapshot.exercises;\n}\n\nexport function isInstanceCompleted(instance: SessionInstance, progressList: WorkoutProgress[]): boolean {\n  const { completedExercises, totalExercises } = calculateInstanceProgress(instance, progressList);\n  return completedExercises >= totalExercises;\n}\n\nexport function getInstanceDuration(instance: SessionInstance): number {\n  return instance.templateSnapshot.estimatedDurationMinutes || estimateSessionDuration(instance.templateSnapshot.exercises);\n}\n\nexport function estimateSessionDuration(exercises: SessionExercise[]): number {\n  // Rough estimation: 2-3 minutes per set based on exercise type + rest time\n  let totalMinutes = 0;\n  \n  exercises.forEach(exercise => {\n    // Different time estimates based on exercise unit\n    let setTime = 2; // Default 2 minutes per set\n    \n    if (exercise.unit === 'seconds') {\n      // For time-based exercises, use the actual time plus setup\n      const avgTime = exercise.timeSecondsMin && exercise.timeSecondsMax \n        ? (exercise.timeSecondsMin + exercise.timeSecondsMax) / 2\n        : exercise.timeSecondsMin || 60;\n      setTime = (avgTime + 30) / 60; // Add 30s setup time, convert to minutes\n    } else if (exercise.unit === 'steps') {\n      // Steps-based exercises typically take longer\n      setTime = 3;\n    } else {\n      // Reps-based exercises\n      const avgReps = exercise.repsMin && exercise.repsMax \n        ? (exercise.repsMin + exercise.repsMax) / 2\n        : exercise.repsMin || 10;\n      \n      // Estimate time based on rep count (higher reps = longer time)\n      if (avgReps > 15) {\n        setTime = 3;\n      } else if (avgReps > 8) {\n        setTime = 2.5;\n      } else {\n        setTime = 2;\n      }\n    }\n    \n    const restTime = (exercise.restSeconds || 60) / 60; // Convert to minutes\n    totalMinutes += (exercise.sets * setTime) + ((exercise.sets - 1) * restTime);\n  });\n  \n  return Math.round(totalMinutes);\n}\n\nexport function generateUniqueId(): string {\n  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\n// Enhanced exercise prescription formatting with better units handling\nexport function formatExercisePrescriptionDetailed(exercise: SessionExercise): {\n  primary: string;\n  secondary?: string;\n  unit: string;\n} {\n  let primary = '';\n  let secondary = undefined;\n  let unit = '';\n  \n  switch (exercise.unit) {\n    case 'reps':\n      unit = exercise.perSide ? 'reps per side' : 'reps';\n      if (exercise.repsMin && exercise.repsMax) {\n        if (exercise.repsMin === exercise.repsMax) {\n          primary = `${exercise.repsMin}`;\n        } else {\n          primary = `${exercise.repsMin}-${exercise.repsMax}`;\n        }\n      } else {\n        primary = exercise.repsMin?.toString() || 'Reps';\n      }\n      break;\n    \n    case 'seconds':\n      unit = 'seconds';\n      if (exercise.timeSecondsMin && exercise.timeSecondsMax) {\n        if (exercise.timeSecondsMin === exercise.timeSecondsMax) {\n          primary = `${exercise.timeSecondsMin}`;\n        } else {\n          primary = `${exercise.timeSecondsMin}-${exercise.timeSecondsMax}`;\n        }\n      } else {\n        primary = exercise.timeSecondsMin?.toString() || 'Time';\n      }\n      break;\n    \n    case 'steps':\n      unit = exercise.perSide ? 'steps per side' : 'steps';\n      primary = exercise.stepsCount?.toString() || 'Steps';\n      break;\n  }\n  \n  // Add weight as secondary info if available\n  if (exercise.weight) {\n    secondary = formatWeight(exercise.weight);\n  }\n  \n  return { primary, secondary, unit };\n}\n\nexport function createEmptySetProgress(setNumber: number): SetProgress {\n  return {\n    setNumber,\n    completed: false,\n    restTimerUsed: false\n  };\n}\n\nexport function createEmptyWorkoutProgress(sessionId: string, exerciseId: string): WorkoutProgress {\n  return {\n    sessionId,\n    exerciseId,\n    sets: [],\n    startedAt: new Date().toISOString()\n  };\n}\n\n// Advanced set tracking utilities\nexport function getSetStatus(exercise: SessionExercise, progress: WorkoutProgress | null, setNumber: number): 'not_started' | 'in_progress' | 'completed' {\n  if (!progress) return 'not_started';\n  \n  const setProgress = progress.sets.find(s => s.setNumber === setNumber);\n  if (!setProgress) return 'not_started';\n  if (setProgress.completed) return 'completed';\n  \n  // Check if any data has been entered for this set\n  const hasData = setProgress.reps !== undefined || \n                  setProgress.weight !== undefined || \n                  setProgress.timeSeconds !== undefined || \n                  setProgress.steps !== undefined;\n  \n  return hasData ? 'in_progress' : 'not_started';\n}\n\nexport function getAllSetsStatus(exercise: SessionExercise, progress: WorkoutProgress | null): ('not_started' | 'in_progress' | 'completed')[] {\n  const statuses: ('not_started' | 'in_progress' | 'completed')[] = [];\n  for (let i = 1; i <= exercise.sets; i++) {\n    statuses.push(getSetStatus(exercise, progress, i));\n  }\n  return statuses;\n}\n\nexport function getCompletionPercentage(exercise: SessionExercise, progress: WorkoutProgress | null): number {\n  if (!progress) return 0;\n  const completedSets = calculateCompletedSets(progress);\n  return Math.round((completedSets / exercise.sets) * 100);\n}\n\n// Session status utilities\nexport function getSessionStatus(instance: SessionInstance): string {\n  switch (instance.status) {\n    case 'scheduled':\n      return 'Scheduled';\n    case 'in_progress':\n      return 'In Progress';\n    case 'completed':\n      return 'Completed';\n    case 'skipped':\n      return 'Skipped';\n    default:\n      return 'Unknown';\n  }\n}\n\nexport function getSessionStatusColor(instance: SessionInstance): string {\n  switch (instance.status) {\n    case 'scheduled':\n      return 'text-blue-400';\n    case 'in_progress':\n      return 'text-yellow-400';\n    case 'completed':\n      return 'text-green-400';\n    case 'skipped':\n      return 'text-gray-400';\n    default:\n      return 'text-gray-400';\n  }\n}\n\n// Time formatting utilities\nexport function formatDuration(minutes: number): string {\n  if (minutes < 60) {\n    return `${minutes}m`;\n  }\n  const hours = Math.floor(minutes / 60);\n  const remainingMinutes = minutes % 60;\n  if (remainingMinutes === 0) {\n    return `${hours}h`;\n  }\n  return `${hours}h ${remainingMinutes}m`;\n}\n\nexport function formatTimeOfDay(timeString?: string): string {\n  if (!timeString) return '';\n  \n  try {\n    const [hours, minutes] = timeString.split(':').map(Number);\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    \n    return date.toLocaleTimeString([], { \n      hour: 'numeric', \n      minute: '2-digit',\n      hour12: true \n    });\n  } catch {\n    return timeString;\n  }\n}\n\n// Validation utilities\nexport function validateExerciseData(exercise: SessionExercise): string[] {\n  const errors: string[] = [];\n  \n  if (!exercise.name.trim()) {\n    errors.push('Exercise name is required');\n  }\n  \n  if (exercise.sets < 1) {\n    errors.push('Sets must be at least 1');\n  }\n  \n  if (exercise.unit === 'reps') {\n    if (exercise.repsMin && exercise.repsMin < 1) {\n      errors.push('Minimum reps must be at least 1');\n    }\n    if (exercise.repsMax && exercise.repsMin && exercise.repsMax < exercise.repsMin) {\n      errors.push('Maximum reps must be greater than or equal to minimum reps');\n    }\n  }\n  \n  if (exercise.unit === 'seconds') {\n    if (exercise.timeSecondsMin && exercise.timeSecondsMin < 1) {\n      errors.push('Minimum time must be at least 1 second');\n    }\n    if (exercise.timeSecondsMax && exercise.timeSecondsMin && exercise.timeSecondsMax < exercise.timeSecondsMin) {\n      errors.push('Maximum time must be greater than or equal to minimum time');\n    }\n  }\n  \n  if (exercise.unit === 'steps' && exercise.stepsCount && exercise.stepsCount < 1) {\n    errors.push('Steps count must be at least 1');\n  }\n  \n  if (exercise.weight !== undefined && exercise.weight < 0) {\n    errors.push('Weight cannot be negative');\n  }\n  \n  if (exercise.restSeconds !== undefined && exercise.restSeconds < 0) {\n    errors.push('Rest time cannot be negative');\n  }\n  \n  return errors;\n}","size_bytes":11933}},"version":1}